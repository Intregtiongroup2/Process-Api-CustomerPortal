"<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>*{box-sizing:border-box;margin:0;padding:0}html{font-size:16px;font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;overflow-y:scroll}header .col-5,header .col-4{padding-top:10px}.topad{margin:20px auto 1px auto;text-align:center}.gsc-search-box input{box-shadow:none !important;padding-left:6px !important}.gsc-search-button-v2{background-color:#4787ed !important;padding:8px 20px !important}.gsc-search-box td{padding:0 !important}body{line-height:1.6em;font-weight:400;background-color:#eee;color:#111}.topform{background-color:#fafafa}article,header,aside,main,footer,label,header img,header svg,.topform{display:block}a{background-color:transparent;color:#3372df;text-decoration:none}a:active,a:hover{outline:0;color:#111}img{border:0;vertical-align:middle}pre{overflow:auto;font-family:monospace,monospace;padding:10px;font-size:1em;border:1px solid #eee;background-color:#fafafa}label{margin-bottom:.3em}label.noblock{padding:4px 6px;margin:.2em 0}fieldset,legend{border:0}input,select,textarea{color:inherit;font:inherit;padding:.3em;margin:0 5px 5px 0;border:1px solid #ccc;box-shadow:inset 0 1px 3px #ddd;border-radius:4px;display:inline-block;font-size:100%;line-height:normal;max-width:100%}select{text-transform:none;background-color:#fff;display:inline-block;font-size:100%;height:2.5em}button,.button{overflow:visible;font:inherit;text-transform:none;letter-spacing:1px;border:0;line-height:normal;white-space:nowrap;padding:.36em .6em;color:#fff;background-color:#1f8dd6;border-radius:4px;display:inline-block;font-size:100%;text-align:center}.button:focus,.button:hover{opacity:.9}button,html input[type="button"],input[type="submit"]{cursor:pointer}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}textarea{overflow:auto}main table{border-collapse:collapse;border-spacing:0;border:1px solid #ddd;margin-bottom:2em;width:90%}td,th{padding:5px;text-align:left}th{background-color:#F4FBE7}tr{border-bottom:1px solid #ddd}h1,h2,h3,h4,h5,h6{font-weight:400;line-height:1.2;margin:.2em 0}h1{font-size:1.4em;margin-top:.4em}h2{font-size:1.3em}h3{font-size:1.3em}h4{font-size:1.2em}h5{font-size:1.15em}p{margin:5px 0 10px 0}ul{padding-left:20px;list-style-type:square}ul li{line-height:1.7em}.row:after{content:"";clear:both;display:block}[class*=col-]{padding:1px;float:left;width:100%}header .row,main{max-width:1080px;margin:0 auto}header{z-index:1;border-bottom:1px solid #eee;background-color:#fafafa}main{padding:5px;min-height:420px;background-color:#fff;word-wrap:break-word;min-height:520px}footer{font-size:90%;margin-top:20px;padding:20px 0;text-align:center;background-color:#eee;color:#555}footer ul{padding-left:0}.center{text-align:center}.noblock{display:inline-block}.border{border:1px solid #ddd}.rounded{border-radius:4px}.margin10{margin:10px 0}.fontsmall{font-size:90%}.full-width{width:100%}.form{background-color:#e4fdbb;border-radius:8px;border:1px solid #a7bd66;padding:5px;margin:10px 0}.bg-gray{background-color:#e6eef4;padding:5px;border:1px solid #8db3ce;border-radius:8px;margin-bottom:1em}.shadow,main{box-shadow:0 2px 8px rgba(0,0,0,.2)}.clear{clear:both}.margin20{margin:20px 0}.margin10a{display:block;margin:10px auto}time,ul .date{color:#555;font-size:85%;display:block}.social{margin:5px 0}.share-on-twitter{background:#41b7d8}.share-on-facebook{background:#3b5997}.share-on-googleplus{background:#d64937}.social a:hover{color:#fff;text-shadow:none}.social .button{font-size:80%;margin-right:4px;text-shadow:0 1px 2px #333;padding:8px}.social .scount{border:1px solid #aaa;margin-right:4px;padding:7px 4px;font-size:85%;background-color:#f5f5f5;color:#555}.list-horizontal,.list-vertical{list-style-type:none}.list-horizontal li{display:inline-block}.list-horizontal li a{padding:2px}.list-vertical li{width:100%;border-bottom:1px dotted #333}.list-vertical li a{display:block;padding:2px 0}.list-vertical li a:before,.list-horizontal li a:before{content:"\00bb";padding-right:5px;color:#bbb}nav .list-vertical{display:inline-block;overflow:auto}.list-2col,.list-3col,.list-4col{padding-left:5px;list-style-position:inside}.list-4col{columns:4;-webkit-columns:4;-moz-columns:4}.list-3col{columns:3;-webkit-columns:3;-moz-columns:3}.list-2col{columns:2;-webkit-columns:2;-moz-columns:2}#distancemap,#map{margin:5px 0}.breadcrumb{min-height:27px;font-size:.875em;color:#555;border-bottom:1px dashed #ccc}.breadcrumb div{display:inline-block;margin:2px}.mnb{padding:3px 5px;margin-right:5px;display:inline-block}.toggle{display:none;width:40px;height:40px;cursor:pointer;left:6px;top:12px;position:absolute}.toggle:after{content:'';display:block;width:27px;height:3px;background:#777;margin:5px;box-shadow:0 8px 0 #777,0 16px 0 #777}.cd-top{overflow:hidden;display:inline-block;height:40px;width:40px;position:fixed;bottom:40px;right:10px;z-index:10;font-size:36px;line-height:55px;color:#fff;background-color:rgba(125,125,125,.5);visibility:hidden;opacity:0;border-radius:4px}.cd-top:hover{opacity:1;color:#eee}.cd-is-visible{visibility:visible;opacity:1}main .form .col-4 button{margin-top:32px}main .form .col-2 button{margin-top:8px}@media(min-width:800px){html{font-size:110%}#distanceto,#distancefrom{max-width:80%}.col-1{width:8.33%}.col-2{width:16.66%}.col-3{width:25%}.col-4{width:33.33%}.col-5{width:41.66%}.col-6{width:50%}.col-7{width:58.33%}.col-8{width:66.66%}.col-9{width:75%}.col-10{width:83.33%}.col-11{width:91.66%}.col-12{width:100%}.col-7-10{width:70%}.col-3-10{width:30%}form{margin-top:4px}button,.button{padding:.36em .7em}main{padding:1px 10px}[class*=col-]{padding:5px}}@media(max-width:799px){html{font-size:110%}header [class*=col-]{padding:2px 0}header ul{padding-left:2px;}.m2{width:50%}.m3{width:33%}.m4{width:25%}nav{position:fixed;left:0}header img,header svg{margin:0 auto}.toggle{display:block;z-index:1;position:fixed}nav.open{-webkit-transform:translate(0,0);transform:translate(0,0)}body.open{overflow:hidden}main.open{transform:translate(215px,0)}nav{width:210px;height:100%;top:55px;bottom:0;background-color:#555;-webkit-transform:translate(-250px,0);transform:translate(-250px,0);-webkit-transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out}nav .list-vertical li a{color:#fff}}@media(max-width:480px){html{font-size:100%}.gsc-search-button-v2{padding:6px 16px !important}.bg-gray{margin-bottom:5px}main table{width:100%}header .list-horizontal{display:none}header .col-5,header .col-4{padding:4px}header .col-6{text-align:center}header input{font-size:18px !important;}#distancemap,#map,#map2{max-height:320px}main .form .col-4 button{margin:5px auto;display:block}table{width:100%}.social{display:block;text-align:center}h1,h2,h3,h4,h5,h6{line-height:1.4;margin:10px 0}h1{font-size:1.3em}h2{font-size:1.3em}h3,h4,h5{font-size:1.2em}td,th,.form{padding:4px 3px}.form select{font-size:90%}.cd-top{right:5px;bottom:5px}.list-4col{columns:2;-webkit-columns:2;-moz-columns:2}.list-2col,.list-3col{columns:1;-webkit-columns:1;-moz-columns:1}}@media print{.social{display:none}}</style>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-84677098-16"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'UA-84677098-16');
</script>
<link rel="icon" type="image/png" href="/favicon.ico" />
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({
            google_ad_client: "ca-pub-7198764309405012",
            enable_page_level_ads: true,
            overlays: {bottom: true}
        });
    </script>

<title>Distance from Kolkata to Mumbai</title>
<meta name="description" content="Distance from Kolkata to Mumbai how many miles and kilometers, how far is it from Kolkata to Mumbai travel distance." />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.3/dist/leaflet.css"
  integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
  crossorigin=""/>
</head>
<body>
<header>
<div class="row">
<div class="col-3">
<a href="/" title="Distance Between Cities"><img src="/logo.png" alt="Distance from to" width="176" height="36" /></a>
</div>
<div class="col-6">
<form method="post" action="/" id="topdistance">
<input type="text" id="distancefrom" name="distancefrom" placeholder="distance from" required />
<input type="text" id="distanceto" name="distanceto" placeholder="distance to" required />
<input type="hidden" name="distoken" id="distoken" value="9f81334a1488977ebc1edc2fc1aa4883ca1c9dd289c9848afd2fae70050a463a" />
<button type="submit" title="Calculate Distance">
<svg fill="none" stroke="#fff" stroke-width="3" width="18px" height="18px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10"/><line x1="18" x2="30" y1="18" y2="30"/></svg></button>
</form>
</div>
<div class="col-3">
<ul class="list-horizontal">
<li><a href="/countrycities.php" title="Distance Between Cities by Country">Cities</a></li>
<li><a href="/countries.php" title="Distance Between Countries">Countries</a></li>
</ul>
</div>
</div>
</header><main>
<div class="margin10">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <!-- distancefromtoust -->
    <ins class="adsbygoogle"
         style="display:inline-block;min-width:320px;width:100%;height:100px"
         data-ad-client="ca-pub-7198764309405012"
         data-ad-slot="2751448667"></ins>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</div>
<div class="breadcrumb">
<div itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
<a href="/distance-between-india-cities" itemprop="url"><span itemprop="title">India</span></a> &raquo;
</div>
<div itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
<a href="/city-kolkata-in" itemprop="url"><span itemprop="title">Kolkata</span></a> &raquo;
</div>
</div>
<h1>Distance from Kolkata to Mumbai</h1>
<p><strong>Distance from Kolkata to Mumbai is 1,656 kilometers</strong>. This air travel distance is equal to 1,029 miles.</p>
<div id="distancemap" style="width:100%; height:400px;" class="shadow"></div>
<div class="bg-gray">
<p>The air travel (bird fly) shortest <strong>distance between Kolkata and Mumbai is 1,656 km= 1,029 miles.</strong></p>
<p>If you travel with an airplane (which has average speed of 560 miles) from Kolkata to Mumbai,
It takes 1.84 hours to arrive.</p>
</div>
<div class="social">
<a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.distancefromto.net%2Fdistance-from-Kolkata-in-to-Mumbai-in" rel="nofollow" target="_blank" class="button share-on-facebook" title="Share on Facebook">Facebook</a>
<a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fwww.distancefromto.net%2Fdistance-from-Kolkata-in-to-Mumbai-in&amp;via=DistanceFromTo" rel="nofollow" target="_blank" class="button share-on-twitter" title="Share on Twitter">Twitter</a>
</div>    <div class="margin10">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <!-- distancefromtoresponsive -->
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-client="ca-pub-7198764309405012"
         data-ad-slot="3128521523"
         data-ad-format="auto"
         data-full-width-responsive="true"></ins>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</div>
<div class="row">
<div class="col-6">
<h2>Kolkata</h2>
<p><a href="/city-kolkata-in" title="Distance Between Kolkata">Kolkata</a> is located in India.</p><table>
<tr><th>GPS Coordinates (DMS)</th><td>22&deg; 33&acute; 45.4680'' N <br />88&deg; 21&acute; 46.9440'' E </td></tr>
<tr><th>Latitude</th><td>22.56263</td></tr>
<tr><th>Longitude</th><td>88.36304</td></tr>
<tr><th>Altitude</th><td>11 m</td></tr>
<tr><th>Country</th><td><a href="/distance-between-india-cities" title="Distance Between India Cities">India</a></td></tr>
</table>

<h3>Kolkata Distances to Cities</h3><table><tr><th>Kolkata</th><th>Distance</th></tr><tr><td><a href="/distance-from-kolkata-in-to-srirampur-in" title="Distance from Kolkata to Srirampur">Distance from Kolkata to Srirampur</a></td><td>55 km</td></tr><tr><td><a href="/distance-from-kolkata-in-to-amta-in" title="Distance from Kolkata to Amta">Distance from Kolkata to Amta</a></td><td>36 km</td></tr><tr><td><a href="/distance-from-kolkata-in-to-baranagar-in" title="Distance from Kolkata to Baranagar">Distance from Kolkata to Baranagar</a></td><td>9 km</td></tr><tr><td><a href="/distance-from-kolkata-in-to-mumbai-in" title="Distance from Kolkata to Mumbai">Distance from Kolkata to Mumbai</a></td><td>1,656 km</td></tr><tr><td><a href="/distance-from-kolkata-in-to-baj-baj-in" title="Distance from Kolkata to Baj Baj">Distance from Kolkata to Baj Baj</a></td><td>21 km</td></tr></table></div>
<div class="col-6">
<h2>Mumbai</h2>
<p><a href="/city-mumbai-in" title="Distance Between Mumbai">Mumbai</a> is located in India.</p><table>
<tr><th>GPS Coordinates</th><td>19&deg; 4&acute; 22.1880'' N <br />72&deg; 52&acute; 57.3960'' E </td></tr>
<tr><th>Latitude</th><td>19.07283</td></tr>
<tr><th>Longitude</th><td>72.88261</td></tr>
<tr><th>Altitude</th><td>8 m</td></tr>
<tr><th>Country</th><td><a href="/distance-between-india-cities" title="Distance Between India Cities">India</a></td></tr>
</table>
<h3>Mumbai Distances to Cities</h3><table><tr><th>Mumbai</th><th>Distance</th></tr><tr><td><a href="/distance-from-mumbai-in-to-ahmedabad-in" title="Distance from Mumbai to Ahmedabad">Distance from Mumbai to Ahmedabad</a></td><td>439 km</td></tr><tr><td><a href="/distance-from-mumbai-in-to-ambad-in" title="Distance from Mumbai to Ambad">Distance from Mumbai to Ambad</a></td><td>311 km</td></tr><tr><td><a href="/distance-from-mumbai-in-to-banswara-in" title="Distance from Mumbai to Banswara">Distance from Mumbai to Banswara</a></td><td>521 km</td></tr><tr><td><a href="/distance-from-mumbai-in-to-boisar-in" title="Distance from Mumbai to Boisar">Distance from Mumbai to Boisar</a></td><td>82 km</td></tr><tr><td><a href="/distance-from-mumbai-in-to-adoni-in" title="Distance from Mumbai to Adoni">Distance from Mumbai to Adoni</a></td><td>603 km</td></tr></table></div>
</div>
    <div class="margin10">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <!-- distancefromtoresponsive -->
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-client="ca-pub-7198764309405012"
         data-ad-slot="3128521523"
         data-ad-format="auto"
         data-full-width-responsive="true"></ins>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</div>
  <div class="row">
      <div class="col-6">
          <h3>Map of Kolkata</h3>
          <iframe width="360" height="360" style="border:0;width:100%" src="https://www.google.com/maps/embed/v1/place?key=AIzaSyCigfi_ffZikxArlk--sY23Fw5xR_NBuvc&q=Kolkata%2CIN" allowfullscreen></iframe>
      </div>
      <div class="col-6">
          <h3>Map of Mumbai</h3>
          <iframe width="360" height="360" style="border:0;width:100%" src="https://www.google.com/maps/embed/v1/place?key=AIzaSyCigfi_ffZikxArlk--sY23Fw5xR_NBuvc&q=Mumbai%2CIN" allowfullscreen></iframe>
      </div>
  </div>
<div class="margin10">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-format="autorelaxed"
         data-ad-client="ca-pub-7198764309405012"
         data-ad-slot="2075868696"></ins>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</div>
<br />
</main>
<footer>
<p>&copy; 2009-2023 <a href="/" title="Distance Between Cities">www.distancefromto.net</a></p>
<ul class="list-horizontal">
<li><a href="/about.php" title="About Us">About Us</a></li>
<li><a href="/privacy.php" title="Privacy Policy">Privacy Policy</a></li>
<li><a href="/contact.php" title="Contact Us">Contact Us</a></li>
<li><a href="https://twitter.com/DistanceFromTo" title="DistanceFromTo on Twitter" target="_blank">@DistanceFromTo</a></li>
</ul>
<em>City to City, place to place distance calculator.</em>
<a href="javascript:void(0)" onclick="gotop();" title="Go to top of page" class="cd-top" id="cd-top">&#8963;</a>
<br /><small>0.0099 s</small></footer>
<script>
var head = document.getElementsByTagName('head')[0];
var insertBefore = head.insertBefore;

head.insertBefore = function (newElement, referenceElement) {
    if (newElement.href && newElement.href.indexOf('https://fonts.googleapis.com/css?family=Roboto') === 0) {
        return;
    }
    insertBefore.call(head, newElement, referenceElement);
};
function gotop(){return document.body.scrollTop=document.documentElement.scrollTop=0,!1}window.onscroll=function(){var o=document.getElementsByTagName("body")[0].scrollTop;o>=100?document.getElementById("cd-top").className="cd-top cd-is-visible":document.getElementById("cd-top").className="cd-top"};
</script>
<script src="https://unpkg.com/leaflet@1.3.3/dist/leaflet.js"
  integrity="sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q=="
  crossorigin=""></script>
<script src="lgds.js"></script>
<script>
var mymap = L.map('distancemap');
var mmr1 = L.marker([22.56263,88.36304]);
mmr1.bindPopup('Kolkata');
mmr1.addTo(mymap);
var mmr2 = L.marker([19.07283,72.88261]);
mmr2.bindPopup('Mumbai');
mmr2.addTo(mymap);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar',
attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'}).addTo(mymap);
mymap.setView([22.56263,88.36304], 5);
var Geodesic = L.geodesic([[mmr1.getLatLng(), mmr2.getLatLng()]], {weight: 4,opacity: 0.4,color: 'red',steps: 50}).addTo(mymap);
mymap.fitBounds(L.latLngBounds(mmr1.getLatLng(), mmr2.getLatLng()));
Geodesic.update = function () { Geodesic.setLatLngs([[mmr1.getLatLng(), mmr2.getLatLng()]]);};Geodesic.update();
</script>
</body>
</html>" as Binary {base: "64"}