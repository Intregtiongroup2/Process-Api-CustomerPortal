<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="pro-addToCart-suite.xml" />
	<munit:test name="pro-addToCartFlowBycustomerId-test-case-1"
		doc:id="08d16b26-b956-4b36-9f58-4a5fb4d093dc">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Check product availability and modify quantity for every product"
				doc:id="e9ea4074-6730-42ef-b730-6dd1bc80bb7b" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7d95f7e5-d040-4da2-9c5c-5ce797d8ad13"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_8.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_10.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="23c502bf-5e53-422e-bd11-97661c4c26aa">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowCustomerIdtestcase1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
				doc:id="0d435d0b-1b80-4cfa-a75c-78c0160d5cba"
				name="pro-addToCartFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="7b4db51e-aad2-435b-9ff5-3a205fe70400"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowCustomerIdtestcase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-addToCartFlowbyCustomerId-testcase2"
		doc:id="28da6501-bc93-4d96-a8af-16050ce067a0">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch Cart details from Salesforce"
				doc:id="4aa83299-a29c-49f2-8923-5b3014228312" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8a9f26fd-d2fb-4f99-81a1-ebd1d69f8a76"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_payload.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Check product availability and modify quantity for every product"
				doc:id="49d884e2-4654-49e1-8d09-ce31622b6640" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7d95f7e5-d040-4da2-9c5c-5ce797d8ad13"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_8.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Add items in the existing cart"
				doc:id="82a227f4-311b-4780-9b55-5980ce4eb3b9"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c18b074a-b176-4356-8b32-b1f6e1e474fb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_16.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseResponse"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="8eca330c-1a89-4bdc-ad2b-f9829b70a11e">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowbyCustomerIdtestcase2\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
				doc:id="5dfb84bc-52fe-45b1-9713-a7ac13940a8a"
				name="pro-addToCartFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="77dc8a85-8366-46dd-8e5a-b7e16f15120d"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowbyCustomerIdtestcase2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

	<munit:test name="pro-addToCartFlowbyEmail-testcase-1"
		doc:id="0a8162a9-5756-445a-805c-dc4bc9ba7575">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Create New cart and add items"
				doc:id="f5d63f65-fdb6-4cd7-98a4-b084ef3bfb72"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e21fe1d7-7918-46bb-a9ed-963687d3cbf5"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseResponse"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch Cart details from Salesforce"
				doc:id="d685c8e7-b27b-43ec-acbe-dee7b7836834" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8a9f26fd-d2fb-4f99-81a1-ebd1d69f8a76"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_payload1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_5.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Check product availability and modify quantity for every product"
				doc:id="99073b9b-efc3-4283-bba9-f15de82dd056" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7d95f7e5-d040-4da2-9c5c-5ce797d8ad13"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_10.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_11.dwl')]" />
						<munit-tools:variable key="rootMessage"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_12.dwl')]" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="counter"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_15.dwl')]" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_18.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_19.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_20.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_22.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase1\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="3406cd67-c17b-42a9-9110-27d703d79b19">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowEmailtestcase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
				doc:id="5a3660a6-d59c-4553-8cce-19f241f24ba4"
				name="pro-addToCartFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="503bdaae-fc64-4bd6-a07b-d8af16e25fec"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowEmailtestcase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-addToCartFlowEmail-testcase2"
		doc:id="3409d9d7-f406-49fc-8fd2-4417e5fab84d">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch Cart details from Salesforce"
				doc:id="9740b7e0-c5b7-4035-9bee-a086b8e06b63" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8a9f26fd-d2fb-4f99-81a1-ebd1d69f8a76"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_payload.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Check product availability and modify quantity for every product"
				doc:id="c6dcf35d-dc40-47fa-91d2-239ee40257e9" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7d95f7e5-d040-4da2-9c5c-5ce797d8ad13"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_6.dwl')]" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_11.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowEmailtestcase2\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="fe82f2e1-8944-49ff-83f7-fe9c2fae60ef">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowEmailtestcase2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowEmailtestcase2\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
				doc:id="30431a17-9f81-40de-82cd-53a28e6c5a71"
				name="pro-addToCartFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="dfbef304-5761-4c45-a390-1cf4ba3bf32b"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowEmailtestcase2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="productavailabilitychecktestcase1"
		doc:id="af86374a-897d-4d5f-9e6d-276e278946e9">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product Details from Nearest WareHouse( MongoDB)"
				doc:id="20710f1b-c186-4cb1-a032-451aefb6f625"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a7349db5-6fb6-46e8-8b8a-72b9aa5ae1eb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update Product Quantity in LocalWarehouse"
				doc:id="7ac41f57-fbff-4dbd-8438-308f6907204b"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="92a286f7-5fce-4d59-bff7-1f85e85fa0da"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase1\mock_variable_12.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_17.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update product Quantity in salesforce"
				doc:id="7ed553a1-a262-4071-ae4c-d3f5b040c1cd"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="838d2a73-c52f-4ff8-bcd3-d2dcdb34219c"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase1\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase1\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_20.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_22.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase1\mock_variable_23.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_24.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_25.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_26.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_27.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_28.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\mock_variable_30.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy
				doc:name="Spy Find nearest warehouse location"
				doc:id="39564c4d-7bb6-4c79-97a9-0a7586debba5" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c1f2bf1f-2ec2-4ba5-8979-c4e98a0ef1e0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call>
					<munit-tools:assert doc:name="Assert payload"
						doc:id="bd8afdb9-0bad-4754-b327-21272b755367"
						message="The payload does not match">
						<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase1::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
					<munit-tools:assert doc:name="Assert variables"
						doc:id="8c1b8620-c4e1-4107-8eb0-5f576ee701c5"
						message="The variables do not match">
						<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase1::spy_assert_variables
---
spy_assert_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call>
					<munit-tools:assert doc:name="Assert payload"
						doc:id="ac7b12f9-be46-4c9c-b84a-5f86d350f975"
						message="The payload does not match">
						<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase1::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
					<munit-tools:assert doc:name="Assert variables"
						doc:id="9fdb5eb4-604d-41eb-9666-385a8698bc76"
						message="The variables do not match">
						<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase1::spy_assert_variables1
---
spy_assert_variables1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input"
				doc:id="3faff264-34cd-45c8-ae87-61daf5b8bb09">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://productavailabilitychecktestcase1\set-event_variable_.dwl')]" />
					<munit:variable key="purchaseDetails"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="externalId"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="vCustomerDetails"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to product-availability-check"
				doc:id="1334f047-3603-4df3-aeb8-bce154a80dba"
				name="product-availability-check" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="b323e9d7-7aec-4b45-bd36-025ddee906d5"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify Find nearest warehouse location"
				doc:id="eca41970-3de5-4fd9-8413-40f2a67da422" processor="flow-ref"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c1f2bf1f-2ec2-4ba5-8979-c4e98a0ef1e0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="product-availability-check-testcase2"
		doc:id="dc5cdd23-ff62-47ed-883e-1e8390d748ce">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product Details from Salesforce"
				doc:id="e1a49a3a-5330-472a-a5b9-ee091746d831"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="0487d2c8-ddb7-442c-b07c-2e8736eb63ac"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://productavailabilitychecktestcase2\mock_payload.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_variable_2.dwl')]" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_10.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Find nearest warehouse location"
				doc:id="34f7ec9e-1483-41c6-8f67-d23673440d25" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c1f2bf1f-2ec2-4ba5-8979-c4e98a0ef1e0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase2\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_variable_16.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_17.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_22.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product Details from Nearest WareHouse( MongoDB)"
				doc:id="277539c6-678c-49e6-a800-a386081f3e7e"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a7349db5-6fb6-46e8-8b8a-72b9aa5ae1eb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase2\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_23.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_24.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_variable_25.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_26.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_27.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_30.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_31.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Add the data in Enquiry"
				doc:id="d02f3f40-f098-4bd4-9002-ff832a7b0cd6"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="84bf25c9-1a4b-4828-9080-b6067a3323fd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase2\mock_payload3.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_32.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_33.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_variable_34.dwl')]" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_35.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_36.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_37.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_38.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_39.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://productavailabilitychecktestcase2\mock_variable_40.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_41.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_42.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_43.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_44.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\mock_variable_45.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="ac1bb4fb-1a08-4600-bc22-43e56bcc4a2e">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://productavailabilitychecktestcase2\set-event_variable_.dwl')]" />
					<munit:variable key="purchaseDetails"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="externalId"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="vCustomerDetails"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase2\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to product-availability-check"
				doc:id="bd374d7f-87c1-458c-8c0a-340f6b16ce73"
				name="product-availability-check" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="4bfee4f9-42ef-4631-98d0-ba01e8d4dbb1"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-cartDetailsFlow-test-success"
		doc:id="ffc969f7-16c7-417e-9314-2cf522f53191">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch cart Details"
				doc:id="bda2337a-99b6-479c-af6f-62e6f433518e"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c4316361-17a9-4f6a-8860-81254c2d0b55"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://procartDetailsFlowtestsuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://procartDetailsFlowtestsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://procartDetailsFlowtestsuccess\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="e78e8a0d-5f21-4b71-bbf6-48c562add778">
				<munit:payload
					value="#[readUrl('classpath://procartDetailsFlowtestsuccess\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://procartDetailsFlowtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://procartDetailsFlowtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-cartDetailsFlow"
				doc:id="f81d9d8a-4678-4bb6-b7cb-6397fee1ddc5"
				name="pro-cartDetailsFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="9cf8ffb3-9cd1-4ce9-ac45-d216f976f1c7"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import procartDetailsFlowtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-cartDetailsFlow-test-error"
		doc:id="adffaad3-12dc-48ed-a8cb-70dd87bb20e6">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="3d3af7c6-d4d5-43a7-975d-3c19e4a2ae17">
				<munit:payload
					value="#[readUrl('classpath://procartDetailsFlowtestfailure\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://procartDetailsFlowtestfailure\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://procartDetailsFlowtestfailure\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="d403c833-4317-4814-afb8-b8a502eda6b8">
				<flow-ref doc:name="Flow-ref to pro-cartDetailsFlow"
					doc:id="87c50e16-5422-4da5-9782-1191fdfde5ee"
					name="pro-cartDetailsFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="f99157f0-511e-4e7c-92fa-1d35d56a1983">
						<logger level="INFO" doc:name="Logger"
							doc:id="75ee035c-488a-47f9-a210-98ac111b52d0"
							message="Continue.." />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				doc:name="Assert that" doc:id="2773de92-1e34-453a-be69-5353dd882e47"
				message='#["Payload doesnot match"]'
				is='#[MunitTools::equalTo("Bad Request: Customer cart does not exists")]'
				expression="#[payload.message]" />
		</munit:validation>
	</munit:test>
	<munit:test name="modifyCartFlowDecrease-test-case-1"
		doc:id="f5fd128b-1da3-4d04-8a64-8379a0328d8d">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch cart Details"
				doc:id="ac04a676-defc-4b09-aedf-5ee84af3856c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="50186391-d416-4f89-9195-266a3fbd3125"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_.dwl')]" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock updateDataInCart"
				doc:id="24edbf1d-5cf0-45dd-954a-b6dfeb2ef774" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="87c1dc96-6f2f-4da9-ab79-26a0e0935ffb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_5.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowDecreasetestcase1\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="fc59a2b0-d6f5-4fd7-b923-db45c7578511">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://modifyCartFlowDecreasetestcase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://modifyCartFlowDecreasetestcase1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://modifyCartFlowDecreasetestcase1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to modifyCartFlow"
				doc:id="90743f75-9c99-42e7-b93b-5320a4c2809f" name="modifyCartFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="36d2bf78-3a64-4a3b-ba63-b9721fbda391"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import modifyCartFlowDecreasetestcase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="modifyCartFlowError-case-1"
		doc:id="838a6808-d720-4401-9e50-f1e2e04023fd">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch cart Details"
				doc:id="3b6121cc-cd18-42d5-a575-a58d0a135d9d"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="50186391-d416-4f89-9195-266a3fbd3125"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://modifyCartFlowErrorCase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://modifyCartFlowErrorCase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://modifyCartFlowErrorCase1\mock_variable_.dwl')]" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowErrorCase1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://modifyCartFlowErrorCase1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="ae5d8f0d-2ddb-4664-96d2-f2003e2a2bc6">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://modifyCartFlowErrorCase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://modifyCartFlowErrorCase1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://modifyCartFlowErrorCase1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="91c67024-e097-45ec-aee2-ccf6e59528c6">
				<flow-ref doc:name="Flow-ref to modifyCartFlow"
					doc:id="0438f80d-cd3c-417e-ac04-7eece3ef5861" name="modifyCartFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="f52f126e-9846-4b6e-9ea3-af24c0f8ac7e">
						<logger level="INFO" doc:name="Logger"
							doc:id="56ea817b-f487-4a50-83a8-9f6ae920c77d" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="262e9aca-ef00-45a3-9d64-5210b6471ddc"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import modifyCartFlowErrorCase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="modifyCartFlowError-case-2"
		doc:id="4d363b35-5c89-4efe-9be2-3b05e2a04f8f">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="79751d25-3b91-44d7-ae04-71d4a9d782e4">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://modifyCartFlowErrorCase2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://modifyCartFlowErrorCase2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://modifyCartFlowErrorCase2\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="c0b2a513-f3e7-4497-8a90-fcf4a89103bd">
				<flow-ref doc:name="Flow-ref to modifyCartFlow"
					doc:id="43995e67-9e7a-44ed-aba3-6bb610d6b45a" name="modifyCartFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="d24c105e-2358-4023-9526-01c3686ad8f2">
						<logger level="INFO" doc:name="Logger"
							doc:id="0c77e571-c6e6-4b04-bb64-d702d32a0a64" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="e4a8d4db-85e9-4b22-a93f-4322e8bdfa9e"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import modifyCartFlowErrorCase2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCart-increase-test-case-1"
		doc:id="f67e32ed-127b-43d0-8267-552b782e3eb4">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock increasing quantity in Cart Table"
				doc:id="d105b983-47d3-4ba8-b5b1-992cbf42ea9b" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="0da6d85e-feb6-49a1-a7b8-a8fe34de6546"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_6.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock decreasing quantity In Products Table"
				doc:id="b34aa30f-7e88-40e5-85ca-b9c2d85f431e" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="48b7ac93-2024-4368-950c-539edba9511f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_12.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_16.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_19.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="55f20413-e88e-413f-8375-225dd418f7be"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_payload2.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase1\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_22.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_25.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_26.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_27.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase1\mock_variable_28.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="82c1b81c-c037-4554-9527-0fba9d59a0fc">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartincreasetestcase1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartincreasetestcase1\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="03b95892-d48b-455b-853f-be985bcf16b7"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="7da87a14-48fc-4e30-b1c3-6210d642b445"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartincreasetestcase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCartincrease-testcase2"
		doc:id="6aa4dc53-81ca-4a28-bc96-e315b7437ff1">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Remove items from the existing cart"
				doc:id="308e8d1e-5309-4f49-bf41-bbce8b230757"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a03f8fca-a0b7-41b7-bf22-94f0b85044be"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_2.dwl')]" />
						<munit-tools:variable key="rootMessage"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_3.dwl')]" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="counter"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_8.dwl')]" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_12.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_16.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_18.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_19.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_20.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Checking Product Quantity available  in other warehouse or not?"
				doc:id="6f3cf98f-4b1d-40a9-a88b-b077cbeec2c8" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="35ccdd0a-2e7e-4d52-a101-7c8a61a709f3"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_22.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_23.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_24.dwl')]" />
						<munit-tools:variable key="rootMessage"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_25.dwl')]" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_26.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_27.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="counter"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_29.dwl')]" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_30.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_31.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_32.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_33.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_34.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_35.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_36.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_37.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_38.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_39.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_40.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_41.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock increasing quantity In Products Table in previous warehouse"
				doc:id="5c5bab6d-780b-45c1-8d1e-3f9573d28ae4" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a1477e5d-895d-4fff-92ec-0b8dacba82df"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_42.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_43.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_44.dwl')]" />
						<munit-tools:variable key="rootMessage"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_45.dwl')]" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_46.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_47.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_48.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_49.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_50.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="counter"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_51.dwl')]" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_52.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_53.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_54.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_55.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_56.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_57.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_58.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_59.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_60.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_61.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_62.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_63.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_64.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="fdd3d9f2-af8a-4863-95e2-bfbe583185b1"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_payload3.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_65.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_66.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_67.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_68.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_69.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_70.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_71.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_72.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch customer email incase of enquiry"
				doc:id="e95d72b0-751d-4fa1-9611-4dcd952dea03"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="5c15c798-0835-4c0f-85d1-e7aa70c554d6"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_payload4.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_attributes4.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_73.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_74.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_75.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_76.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_77.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_78.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_79.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase2\mock_variable_80.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="35f2ccd8-e231-4f06-8994-ec21632a632f">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartincreasetestcase2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartincreasetestcase2\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase2\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="460efccb-2022-4ca1-a04f-12cc80150c7b"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="13508817-9048-4b38-8dd7-89e1bb4dfb55"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartincreasetestcase2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCartincrease-testcase4"
		doc:id="f898fbf7-1eb2-40b5-a157-bfaa1e35763a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Checking Product Quantity available  in other warehouse or not?"
				doc:id="f6d949a6-62e6-413d-b6f9-7b8206e203f4" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="35ccdd0a-2e7e-4d52-a101-7c8a61a709f3"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase4\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_2.dwl')]" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_8.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_16.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="2e519807-d598-486a-885c-86c58f12ab37"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_payload1.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase4\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_18.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_19.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_22.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_23.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase4\mock_variable_25.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="4ae42331-cdff-41b4-a4ff-9f8a33cd396e">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase4\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartincreasetestcase4\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartincreasetestcase4\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase4\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="ec3363d9-211c-4e87-9531-80c264a80f0e"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="450671c2-c0f1-4ea5-9e81-3371fc2bf61f"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartincreasetestcase4::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCartremove-test"
		doc:id="0e2f10ea-b1eb-42fd-8b65-a6b65af36c5a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock increasing quantity In Products Table"
				doc:id="cbe79160-46a2-4f7e-88bd-ba02109328a9" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="4296fdb2-361d-4a97-8cf2-615fb0aa82c0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartremovetest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartremovetest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartremovetest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="d40b7f0a-d464-4c79-9887-d3c690fb61f3"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartremovetest\mock_payload1.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartremovetest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartremovetest\mock_variable_10.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_16.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Remove items from the existing cart"
				doc:id="6e052278-0c0c-46af-b4ca-83ed2b5509cb"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="81483c68-df45-43d4-bfc4-2c1b14003abb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartremovetest\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartremovetest\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_17.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartremovetest\mock_variable_18.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_22.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartremovetest\mock_variable_24.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="3ff3380f-e00e-4940-a22a-ca3cd98b0dda">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartremovetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartremovetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartremovetest\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartremovetest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="2df988c7-2ff6-493f-aa2f-aae86c502c80"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="3163fef3-ff77-4ee5-9e96-9134f4f27e2a"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartremovetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCartdecrease-test"
		doc:id="9a3796fe-259d-48fb-9adf-d1a46b49cfc5">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock decreasing quantity in Cart table"
				doc:id="feae4ba2-2cec-4eec-a77a-33b3c12c75b4" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6359dafc-38d6-43c8-a443-24827b613915"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartdecreasetest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartdecreasetest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartdecreasetest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_6.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock increasing quantity In Products Table"
				doc:id="4d58da2e-6dd4-4438-8abb-3e2fa6f4caf7" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6fef7391-ddbc-47f8-8b48-623ce40e78a9"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartdecreasetest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartdecreasetest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartdecreasetest\mock_variable_12.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_16.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_19.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="97b95a47-cc57-42f9-9b70-307ee3d914f5"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartdecreasetest\mock_payload2.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartdecreasetest\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartdecreasetest\mock_variable_22.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_25.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_26.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_27.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartdecreasetest\mock_variable_28.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="ce711843-60ec-4b6d-824d-990d6129f842">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartdecreasetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartdecreasetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartdecreasetest\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartdecreasetest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="34b28213-537c-466a-92bf-ff75d810871c"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="0821d433-fa4a-4e26-bfec-d8a5619031f5"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartdecreasetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCartnoChange-test"
		doc:id="ddd80ee3-62ef-444b-bc3d-447a2eb97ac3">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="80ecd969-54fa-4954-87fd-205b8b4a3ac6"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartnoChangetest\mock_payload.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartnoChangetest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartnoChangetest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartnoChangetest\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="11bf6508-db21-4565-90c4-2237ee223a6b">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartnoChangetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartnoChangetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartnoChangetest\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartnoChangetest\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartnoChangetest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="eee9be0e-c341-4a82-8ada-267eb5260c15"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="d2648795-b606-490b-8d36-730c0634ffa9"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartnoChangetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updataing-Items-in-cart-test"
		doc:id="b564f723-6c36-4014-b849-39188a0ad967">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Remove items from the existing cart"
				doc:id="84b7b307-19be-4742-b5aa-fa876bcdbd08"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="2e16a236-8a03-4250-a2d0-fce2641492de"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updataingItemsincarttest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updataingItemsincarttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable
							key="updatedTotal_Price"
							value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updataingItemsincarttest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\mock_variable_6.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="modifiedItems"
							value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="5590e77b-67a2-48ca-abfa-500c2ea221c8">
				<munit:payload
					value="#[output application/java  --- readUrl('classpath://updataingItemsincarttest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/java " />
				<munit:attributes
					value="#[readUrl('classpath://updataingItemsincarttest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="productTitle"
						value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updataingItemsincarttest\set-event_variable_1.dwl')]" />
					<munit:variable key="warehouseQuantity"
						value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="total_price"
						value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="warehouse_location"
						value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updataingItemsincarttest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartProductQuantity"
						value="#[output application/java --- readUrl('classpath://updataingItemsincarttest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updataing-Items-in-cart"
				doc:id="16f8cd56-c1bf-42a3-b27b-da4c912efeeb"
				name="updataing-Items-in-cart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="d3822af5-ca03-4495-af0f-ff8d6ab16aa5"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updataingItemsincarttest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updating-product-quantity-test"
		doc:id="649475a7-19c9-42ae-8535-1099b7293bf7">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Update Product  Quantity In SFDC"
				doc:id="7ef266c3-c7f9-49a9-b1ae-23ac9d7fba16"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c4847112-89f7-470b-81e5-42180fe0ea78"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updatingproductquantitytest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updatingproductquantitytest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updatingproductquantitytest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update Product  Quantity In local"
				doc:id="4a6baad2-6909-4314-a449-c81449bb2f51"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="824b624e-7ed5-441a-906d-85edede7dc4e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updatingproductquantitytest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updatingproductquantitytest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updatingproductquantitytest\mock_variable_10.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="finalQuantity"
							value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\mock_variable_17.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="18702106-f8ca-4113-a411-cc38e83f50bf">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updatingproductquantitytest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updatingproductquantitytest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="productTitle"
						value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updatingproductquantitytest\set-event_variable_1.dwl')]" />
					<munit:variable key="warehouseQuantity"
						value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="total_price"
						value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="warehouse_location"
						value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="finalQuantity"
						value="#[output application/json --- readUrl('classpath://updatingproductquantitytest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartProductQuantity"
						value="#[output application/java --- readUrl('classpath://updatingproductquantitytest\set-event_variable_8.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updating-product-quantity"
				doc:id="c7a48cd9-0066-41db-88b2-52c5f4f15fbf"
				name="updating-product-quantity" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="f6d472aa-8612-4874-a41e-eea2462ba21b"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updatingproductquantitytest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getProductDetialsFlowSpecifiProduct-test"
		doc:id="4157b264-2cda-4c32-b2d6-d65a39303a34">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock FetchProductDetailsFromSalesforce"
				doc:id="5f6c4125-87e0-4efa-8e21-4b0fcd70ec9a" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="63f83f1f-50e9-42d7-820b-f054c70bd8f1"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getProductDetialsFlowSpecifiProducttest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getProductDetialsFlowSpecifiProducttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getProductDetialsFlowSpecifiProducttest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="6cec714f-4bde-4bb5-8645-d4182fa5a22e">
				<munit:payload
					value="#[readUrl('classpath://getProductDetialsFlowSpecifiProducttest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getProductDetialsFlowSpecifiProducttest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getProductDetialsFlowSpecifiProducttest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to getProductDetialsFlow"
				doc:id="daba6436-0401-4fe0-9197-d20febf8aaa7"
				name="getProductDetialsFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="85720963-2a38-4175-9ea4-198a6f8adeda"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getProductDetialsFlowSpecifiProducttest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getProductDetialsFlowAllProducts-test"
		doc:id="c93b4308-1f2d-478f-9a1c-3723cff0f31e">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock FetchProductDetailsFromSalesforce"
				doc:id="e18494b1-e447-49cd-8a46-6e02337d35fa" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="0503b006-0f27-4512-901d-d91f3406d7f5"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getProductDetialsFlowAllProductstest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getProductDetialsFlowAllProductstest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getProductDetialsFlowAllProductstest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="738942f1-3e11-4d9a-b07b-a2e08f07fa22">
				<munit:payload
					value="#[readUrl('classpath://getProductDetialsFlowAllProductstest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getProductDetialsFlowAllProductstest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getProductDetialsFlowAllProductstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to getProductDetialsFlow"
				doc:id="0397b1fa-4225-40f5-9083-a93976df9d2e"
				name="getProductDetialsFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="fb8b0781-4975-4635-9543-1f2ce5199c38"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getProductDetialsFlowAllProductstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getProductDetailsError-test"
		doc:id="520ba6b9-89a7-460f-b8e7-a4cb44816144">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="ee90935f-1275-4b36-a3e9-9f1f58e453f1">
				<munit:payload
					value="#[readUrl('classpath://getProductDetailsErrortest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getProductDetailsErrortest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getProductDetailsErrortest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="b5879893-f190-446a-8bce-87449e6fd91f">
				<flow-ref
					doc:name="Flow-ref to FetchProductDetailsFromSalesforce"
					doc:id="c480166e-1fa8-494e-b0bd-9fb431111cc9"
					name="FetchProductDetailsFromSalesforce" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="9eeb6fc7-3d04-47b1-b25c-10056e3f74f5">
						<logger level="INFO" doc:name="Logger"
							doc:id="b27ee05b-3f29-4a29-852d-1fee05c717a3" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="7719d869-0039-4d32-8532-a5d7f0b4111a"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getProductDetailsErrortest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateProductQuantityFlow-test"
		doc:id="46d4f3cc-ffea-44fb-b420-79e5424a53bd">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Update product quantity in SFDC"
				doc:id="02d313fc-c5d6-4eac-b403-560de6a46ba4"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="ac553c2d-cbac-4636-9aca-5de0e726248f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateProductQuantityFlowtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateProductQuantityFlowtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateProductQuantityFlowtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateProductQuantityFlowtest\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateProductQuantityFlowtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update product quantity in local"
				doc:id="150f1966-c225-46da-9060-cc23fb65c236"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f7299577-4327-4436-a00d-9a31ce189ad4"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateProductQuantityFlowtest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateProductQuantityFlowtest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateProductQuantityFlowtest\mock_variable_3.dwl')]" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateProductQuantityFlowtest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateProductQuantityFlowtest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product quantity"
				doc:id="706db9b7-914d-4358-af77-b6b9b17d041f"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1087dd06-a29a-48bf-8445-5c24c02e1006"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateProductQuantityFlowtest\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateProductQuantityFlowtest\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateProductQuantityFlowtest\mock_variable_6.dwl')]" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateProductQuantityFlowtest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="3440cf87-607f-4c1d-a692-88fbe1e605d5">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateProductQuantityFlowtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateProductQuantityFlowtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateProductQuantityFlowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateProductQuantityFlow"
				doc:id="6b7c49e4-a213-4555-ba2a-68c57c39fca4"
				name="updateProductQuantityFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="bb358a05-0f70-4bbf-9535-873695c59da9"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateProductQuantityFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDataInCartincreasetestcase3"
		doc:id="45799dd0-8173-4357-ac99-bae24303eaa2">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Checking Product Quantity available  in other warehouse or not?"
				doc:id="ecec3667-a56d-49f8-8445-a8b9061c0fc8" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="35ccdd0a-2e7e-4d52-a101-7c8a61a709f3"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_2.dwl')]" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_8.dwl')]"
							encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_16.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch the avaiable Product Quantiy"
				doc:id="f7e08cf6-75e1-4ee6-a616-1bd93b408805"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a6caa335-6f4d-48ed-a853-b5671da9cbb8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_payload1.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_18.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_19.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_22.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_23.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_25.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch customer email incase of enquiry"
				doc:id="62d3f99f-b4b7-420b-9012-885784bccad3"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="5c15c798-0835-4c0f-85d1-e7aa70c554d6"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_26.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_27.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_30.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_31.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_32.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://updateDataInCartincreasetestcase3\mock_variable_33.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="2de36e5a-9005-4c71-9438-a7fdd60a102b">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDataInCartincreasetestcase3\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDataInCartincreasetestcase3\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDataInCartincreasetestcase3\set-event_variable_.dwl')]" />
					<munit:variable key="updateDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDataInCartincreasetestcase3\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDataInCart"
				doc:id="15a6efd1-c683-42f7-8987-30817e53c0f0"
				name="updateDataInCart" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="ce355066-d11f-45da-8f53-3370060c8c21"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDataInCartincreasetestcase3::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="callingExternalApiToFindNearestWareHouseLocation-test-error"
		doc:id="a14f3a69-2908-4140-b017-bcd612bc113d">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="1c76fd13-42ae-4f5e-9cb8-af8b0b49ad64">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:variables>
					<munit:variable key="productTitle"
						value="#[output application/java --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="quantity"
						value="#[output application/java --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_2.dwl')]" />
					<munit:variable key="email"
						value="#[output application/java --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="purchaseDetails"
						value="#[output application/json --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="vCustomerDetails"
						value="#[output application/json --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="externalId"
						value="#[output application/json --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/java --- readUrl('classpath://callingExternalApiToFindNearestWareHouseLocationtesterror\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="30b5d6f4-44b6-4846-95e3-bc5fbd818c13">
				<flow-ref
					doc:name="Flow-ref to callingExternalApiToFindNearestWareHouseLocation"
					doc:id="3c925a54-ee4e-4e2e-a12e-e23cae23de9c"
					name="callingExternalApiToFindNearestWareHouseLocation" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="4f044bf8-18e1-4f0d-8e90-b712bffb5e57">
						<logger level="INFO" doc:name="Logger"
							doc:id="7f1b7768-c50c-46bb-9e6c-04b232911b3d" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="f46ef49c-a10f-4508-877e-23b34ef978e9"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import callingExternalApiToFindNearestWareHouseLocationtesterror::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-addToCartFlow-test-error-3"
		doc:id="88c6a7ac-9614-40ca-aceb-9d213aed0de0">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="48f868e2-afae-4d3b-97dc-903423966dcd">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowtesterror3\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowtesterror3\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowtesterror3\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="866863fd-1601-4ef9-9195-f16a69bf65ae">
				<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
					doc:id="b939c1bd-33f1-4fcb-88ac-ea849c4cd2bf"
					name="pro-addToCartFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="33078ce4-00da-44b6-8755-5055353b4878">
						<logger level="INFO" doc:name="Logger"
							doc:id="71d3cbfb-5912-499e-9d53-1148243cd877" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="ffc765cf-93df-47d6-9b9c-a60d5fe76ec7"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowtesterror3::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-addToCartFlow-test-error-4"
		doc:id="450e2ec2-e85c-46a2-b6a4-f944e6d633de">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="8657759b-c91e-4812-8ae7-8b60b5ee10f7">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowtesterror4\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowtesterror4\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowtesterror4\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="47d6382f-89d6-480b-b544-231b2efabab0">
				<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
					doc:id="f02acc22-7317-476e-b387-305eaf819f29"
					name="pro-addToCartFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="416e2153-5d5a-4702-a329-619fff0f0d09">
						<logger level="INFO" doc:name="Logger"
							doc:id="392d62ad-b54f-4db4-b073-5dd21853a101" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="0d85b2b6-530c-4b8d-b483-97ce0425aa24"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowtesterror4::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-addToCartFlow-test-error-5"
		doc:id="c1a40868-f5a4-4d3e-948d-b913c69619a1">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch Cart details from Salesforce"
				doc:id="4f813f9d-8165-4f80-a0d4-27d66249808c" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8a9f26fd-d2fb-4f99-81a1-ebd1d69f8a76"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://proaddToCartFlowtesterror3\mock_payload.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Check product availability and modify quantity for every product"
				doc:id="dce7e73e-df56-42b9-a30d-59967f2d7ff0" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7d95f7e5-d040-4da2-9c5c-5ce797d8ad13"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowtesterror3\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowtesterror3\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_8.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_13.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Add items in the existing cart"
				doc:id="bf432cb5-d82f-4c47-8ec8-c8c5b6a54399"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c18b074a-b176-4356-8b32-b1f6e1e474fb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddToCartFlowtesterror3\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddToCartFlowtesterror3\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_16.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseResponse"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://proaddToCartFlowtesterror3\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="0aefa849-fb25-4702-b16e-c6623f255795">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddToCartFlowtesterror4\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddToCartFlowtesterror4\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddToCartFlowtesterror4\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="75097b31-98da-4522-97e8-65498f0253ba">
				<flow-ref doc:name="Flow-ref to pro-addToCartFlow"
					doc:id="f5c4ef8a-da29-4def-80ce-0a128e9cc13a"
					name="pro-addToCartFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="5f7e80f9-985d-407c-8699-0d367c2c77f3">
						<logger level="INFO" doc:name="Logger"
							doc:id="4f58e379-69fd-4b22-a983-070b1f0f0e0e" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="54065ca7-4c24-4aff-a425-1bc24b69647d"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddToCartFlowtesterror4::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="product-availability-check-test-case3"
		doc:id="61bd8606-a97b-470e-bedd-f84f4166b136">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Find nearest warehouse location"
				doc:id="4c4b9796-d30f-47f4-a8ea-160b6ec629ea" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c1f2bf1f-2ec2-4ba5-8979-c4e98a0ef1e0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase3\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase3\mock_variable_16.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_17.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_22.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product Details from Nearest WareHouse( MongoDB)"
				doc:id="9797ca4d-72c5-4a48-85ed-1cf45ba983d0"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a7349db5-6fb6-46e8-8b8a-72b9aa5ae1eb"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase3\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase3\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_23.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_24.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase3\mock_variable_25.dwl')]" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_26.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_27.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_30.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_31.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product Details from Salesforce"
				doc:id="8d85aa0e-90d9-4277-9a85-0127ba775df4"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="0487d2c8-ddb7-442c-b07c-2e8736eb63ac"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/java  --- readUrl('classpath://productavailabilitychecktestcase3\mock_payload.dwl')]"
						mediaType="application/java " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productavailabilitychecktestcase3\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="localQuantity"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="quantity"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://productavailabilitychecktestcase3\mock_variable_2.dwl')]" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="Nearest_Warehouse_locations"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="iteration_no"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_9.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="seller_location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_10.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="email"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/java --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_12.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="productDeatailsResponse"
							value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update Product Quantity in LocalWarehouse"
				doc:id="d6d96e35-01f0-4c31-8e02-370ac04c6d90"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b4d9244e-5efd-464b-9223-666f587d944f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update product Quantity in salesforce"
				doc:id="1d885d4b-1a72-449d-bb86-4538e7620de1"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a73c0aa9-49b9-4544-92ab-b03ef492a0ce"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="f4fb8385-a9e9-40be-8796-7dd06cc88e18">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://productavailabilitychecktestcase3\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://productavailabilitychecktestcase3\set-event_variable_.dwl')]" />
					<munit:variable key="purchaseDetails"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="externalId"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="vCustomerDetails"
						value="#[output application/json --- readUrl('classpath://productavailabilitychecktestcase3\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to product-availability-check"
				doc:id="407e4068-e4c3-426c-9b77-3768ea8e1bce"
				name="product-availability-check" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="b1d65282-a7c3-4fa3-8316-ed5a926015b5"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import productavailabilitychecktestcase3::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-feedbackFlow-test-success"
		doc:id="de28f88f-93c5-4f8e-be48-36cd27badb03">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Add the feedback in orderDetails"
				doc:id="0c600add-9fe0-4c0a-b8fc-d4036243bb52"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="11bb1d84-1fd6-4ade-87c7-58f90792c832"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://profeedbackFlowtestsuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://profeedbackFlowtestsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="feedback"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_1.dwl')]" />
						<munit-tools:variable key="orderId"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerId"
							value="#[output application/java --- readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Get the orderDetails"
				doc:id="9f7b4933-839d-423a-9238-091284b9ef3c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1b25d5d8-8d65-471c-866e-3da2a50e7ce2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://profeedbackFlowtestsuccess\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://profeedbackFlowtestsuccess\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="feedback"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_5.dwl')]" />
						<munit-tools:variable key="orderId"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerId"
							value="#[output application/java --- readUrl('classpath://profeedbackFlowtestsuccess\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="ba78bcb7-4c80-475f-826f-b66e4e67954a">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://profeedbackFlowtestsuccess\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://profeedbackFlowtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://profeedbackFlowtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-feedbackFlow"
				doc:id="8b99de59-9e24-4566-a41f-55a71adc992c"
				name="pro-feedbackFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="203989e6-2947-4f32-bcac-36f8c8a35263"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import profeedbackFlowtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-feedbackFlow-test-error-1"
		doc:id="20de91e3-a841-4f91-81e9-5690b059c943">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Get the orderDetails"
				doc:id="d8142304-16e6-4abb-885e-e430649721bf"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1b25d5d8-8d65-471c-866e-3da2a50e7ce2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://profeedbackFlowtesterror1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://profeedbackFlowtesterror1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="feedback"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtesterror1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://profeedbackFlowtesterror1\mock_variable_5.dwl')]" />
						<munit-tools:variable key="orderId"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtesterror1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerId"
							value="#[output application/java --- readUrl('classpath://profeedbackFlowtesterror1\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="f4cc6aa0-bc73-46ef-96b6-c9937f6be5bf">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://profeedbackFlowtesterror1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://profeedbackFlowtesterror1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://profeedbackFlowtesterror1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="161c4a0c-2803-4eac-a0ed-e67efb883d6f">
				<flow-ref doc:name="Flow-ref to pro-feedbackFlow"
					doc:id="757bf34d-4406-4844-b120-9e470a4585c2"
					name="pro-feedbackFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="33b3286c-55a7-4238-ad73-d376725d4c9c">
						<logger level="INFO" doc:name="Logger"
							doc:id="bc36a5ca-0bad-4235-973a-23790f433c2a" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="caadc3aa-76b5-4061-af58-663992f11a73"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import profeedbackFlowtesterror1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-feedbackFlow-test-error-2"
		doc:id="330e8493-e224-42bc-9b99-78b974388092">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Get the orderDetails"
				doc:id="3cdf8209-43a3-46ad-86c6-bff930fdd52a"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1b25d5d8-8d65-471c-866e-3da2a50e7ce2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://profeedbackFlowtesterror2\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://profeedbackFlowtesterror2\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="feedback"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtesterror2\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://profeedbackFlowtesterror2\mock_variable_5.dwl')]" />
						<munit-tools:variable key="orderId"
							value="#[output application/json --- readUrl('classpath://profeedbackFlowtesterror2\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerId"
							value="#[output application/java --- readUrl('classpath://profeedbackFlowtesterror2\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="942de9e7-ac55-487f-8525-99dff4921a39">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://profeedbackFlowtesterror2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://profeedbackFlowtesterror2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://profeedbackFlowtesterror2\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="e18e259f-10f0-4ec0-9d02-96915443a035">
				<flow-ref doc:name="Flow-ref to pro-feedbackFlow"
					doc:id="d13ebc45-b750-4e1f-aa00-ed459f8a56b3"
					name="pro-feedbackFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="c5823cfb-7848-47c9-9ed0-402fdcbba0c5">
						<logger level="INFO" doc:name="Logger"
							doc:id="01741256-2825-4774-9ccb-84abcf8f8338" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="3ab8e2d5-f703-4a15-ad28-b0470a2edb7e"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import profeedbackFlowtesterror2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-feedbackFlow-test-error-3"
		doc:id="693dac7e-9f24-478e-959b-ebc703ee8eb5">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="53ea6e1c-e88b-4741-9acf-39725eb0de4b">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://profeedbackFlowtesterror3\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://profeedbackFlowtesterror3\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://profeedbackFlowtesterror3\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="53c8e37e-3454-4279-af73-f692a78de066">
				<flow-ref doc:name="Flow-ref to pro-feedbackFlow"
					doc:id="cf17596d-5455-4b19-9ef3-61366146e361"
					name="pro-feedbackFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="c2891f08-37b0-4eaa-94e2-909e27a6b337">
						<logger level="INFO" doc:name="Logger"
							doc:id="359a9e32-3805-4a9f-b1f7-6251fa342788" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="b7b8536d-2e84-41b9-ba9e-31c2546ebbcc"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import profeedbackFlowtesterror3::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<flow name="mock-email:send"
		doc:id="d7550f16-e41d-4e35-9389-582d21a89aab">
		<try doc:name="Try" doc:id="9dc09c8a-864c-4e91-bc40-036ccdf315a0">
			<munit-tools:retrieve doc:name="Retrieve"
				doc:id="d9abb3de-26d5-42ad-bffa-5e54e5789200" key="Mock Send Email" />
			<error-handler>
				<on-error-continue enableNotifications="false"
					logException="false" doc:name="On Error Continue"
					doc:id="c4bbaf95-e43f-434e-8a1c-3ebe2e564bd3" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload"
						doc:id="85912e97-3ed1-46ad-99d5-d739b5f12540" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store"
			doc:id="0f19e22f-ef8e-4c7e-9239-358bcd6e05ae" key="Mock Send Email">
			<munit-tools:value><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice"
			doc:id="00f36dc9-9041-44a8-b044-de59224a6242">
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event"
					doc:id="8056bcec-44fd-4063-bc09-8437c07d9536">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload5.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_20.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_21.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_22.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_23.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event"
					doc:id="965c0177-3c52-42d2-a883-8921ecd31722">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload6.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_24.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_25.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_26.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_27.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 3]">
				<munit:set-event doc:name="Set Event"
					doc:id="1527bbf7-00d5-4bcf-90cd-2c1dd24447cb">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload7.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_28.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_29.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_30.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_31.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 4]">
				<munit:set-event doc:name="Set Event"
					doc:id="2ae39992-11e3-4ce5-b824-aa9b03e88ed0">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload8.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_32.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_33.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_34.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_35.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 5]">
				<munit:set-event doc:name="Set Event"
					doc:id="a5ecb40c-ed3f-4d4b-9f6c-b2aea477f424">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload9.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_36.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_37.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_38.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_39.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise>
				<munit-tools:fail doc:name="Fail"
					doc:id="7d42f80f-ae93-4f27-b4aa-48f8a73e219b"
					message="There are no more events to mock" />
			</otherwise>
		</choice>
	</flow>
	<flow name="mock-http:request"
		doc:id="740bb844-0c4b-4814-9a15-7749a8dae25b">
		<try doc:name="Try" doc:id="3c08e670-1989-4435-8585-2749632a7aa7">
			<munit-tools:retrieve doc:name="Retrieve"
				doc:id="6fd38aa5-ffcb-4f44-885f-251e432a7bb5"
				key="Mock Delete the Record" />
			<error-handler>
				<on-error-continue enableNotifications="false"
					logException="false" doc:name="On Error Continue"
					doc:id="ecaa1624-b85a-45a2-8a0c-8e9a47b79007" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload"
						doc:id="f7b62187-dc6d-48fe-88ae-6ff7ed2b7295" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store"
			doc:id="7b8b8eb0-1355-40c8-89a7-bd9fbaa68330"
			key="Mock Delete the Record">
			<munit-tools:value><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice"
			doc:id="7b0cb9ce-eec3-4333-94af-083745125d2f">
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event"
					doc:id="4e5730e0-78ee-4e9f-8648-6bc309ca6f65">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_1.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_2.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_3.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event"
					doc:id="89a8a222-c851-424c-86a0-08b02c86ea63">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload1.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_4.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_5.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_6.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_7.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 3]">
				<munit:set-event doc:name="Set Event"
					doc:id="c5cacab6-93be-44c0-9c13-7d18d00fa409">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload2.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_8.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_9.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_10.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_11.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 4]">
				<munit:set-event doc:name="Set Event"
					doc:id="f7156abf-2d66-4c65-9463-9ad7d136f74f">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload3.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_12.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_13.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_14.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_15.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 5]">
				<munit:set-event doc:name="Set Event"
					doc:id="7d035cb7-66bf-4e0d-9a13-06c3e0d752a8">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload4.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_16.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="email"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_17.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_18.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_19.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise>
				<munit-tools:fail doc:name="Fail"
					doc:id="ec525124-1ec3-4df5-bd2e-f78a158f2c84"
					message="There are no more events to mock" />
			</otherwise>
		</choice>
	</flow>
	<flow name="mock-http:request1"
		doc:id="d998c751-f261-4533-b46a-b149ff17dcb2">
		<try doc:name="Try" doc:id="d57cf567-7bc9-401b-b9bd-62569cb8ee86">
			<munit-tools:retrieve doc:name="Retrieve"
				doc:id="441b0328-2956-460b-aa9f-18f064b0cb07"
				key="Mock Fetch Product Quantity Details " />
			<error-handler>
				<on-error-continue enableNotifications="false"
					logException="false" doc:name="On Error Continue"
					doc:id="a6973f3e-f5df-477e-b5f0-f923e90b77a3" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload"
						doc:id="4b9b2b6d-1f99-4650-9861-f52dfdae4ecc" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store"
			doc:id="f7c8b624-10f5-457f-86ba-791be94deb1d"
			key="Mock Fetch Product Quantity Details ">
			<munit-tools:value><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice"
			doc:id="ebc63f39-2b10-43d3-9d5b-4ed8a5d5b312">
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event"
					doc:id="6ac57392-9ea7-4dc7-9ae7-607a4ffd8276">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload10.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_40.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_41.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_42.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event"
					doc:id="4dc23ef6-d9b0-4dd0-b09d-3ed793cd079b">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload11.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_43.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_44.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_45.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 3]">
				<munit:set-event doc:name="Set Event"
					doc:id="49d08680-5c53-40e7-a42e-cf0a82a43ace">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload12.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_46.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_47.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_48.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 4]">
				<munit:set-event doc:name="Set Event"
					doc:id="1937bcfb-4dde-43d5-8896-561dac9007f6">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload13.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_49.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_50.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_51.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 5]">
				<munit:set-event doc:name="Set Event"
					doc:id="da7b313f-6012-4eed-8348-07cfc3f736c2">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload14.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_52.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_53.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_54.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise>
				<munit-tools:fail doc:name="Fail"
					doc:id="8633504a-ce4c-45d8-b76d-cb3a2aa7f17b"
					message="There are no more events to mock" />
			</otherwise>
		</choice>
	</flow>
	<flow name="mock-http:request2"
		doc:id="9df441ad-0ecf-4aa9-a595-c01de9bbabe9">
		<try doc:name="Try" doc:id="c96d50a7-fd42-4b31-8179-9b76cdb497de">
			<munit-tools:retrieve doc:name="Retrieve"
				doc:id="4f71216e-6d09-4acb-ad31-b39fa9df17c3"
				key="Mock Fetch All Enquires" />
			<error-handler>
				<on-error-continue enableNotifications="false"
					logException="false" doc:name="On Error Continue"
					doc:id="77dc99c1-2ea5-4a3e-ac0c-0c87b0cd4c64" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload"
						doc:id="197f22c0-48cd-40b6-a3cd-b9ccc976e7ce" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store"
			doc:id="b706011f-79bd-4775-b7cc-12dc91abd1d3"
			key="Mock Fetch All Enquires">
			<munit-tools:value><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice"
			doc:id="57ff3c1b-28f8-4f19-922c-c13e4b57e7f6">
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event"
					doc:id="98471167-8fc7-42c2-9f63-bdcca6030944">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload15.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_55.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_56.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event"
					doc:id="5eb608ef-a1f3-454f-bd10-e3b6583807c4">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload16.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_57.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_58.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 3]">
				<munit:set-event doc:name="Set Event"
					doc:id="78e06e3b-9141-4456-9ea5-5cc1edbe6b4b">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload17.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_59.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_60.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 4]">
				<munit:set-event doc:name="Set Event"
					doc:id="59bd50c5-7485-4213-8052-46ca54ff5e1c">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload18.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_61.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_62.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 5]">
				<munit:set-event doc:name="Set Event"
					doc:id="e10e0686-ca6c-412d-8edd-eeeddafc2f19">
					<munit:payload
						value="#[output application/java  --- readUrl('classpath://enquiryEmailFlowtest\mock_payload19.dwl')]"
						encoding="UTF-8" mediaType="application/java " />
					<munit:variables>
						<munit:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_63.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="enquiryDetails"
							value="#[output application/json --- readUrl('classpath://enquiryEmailFlowtest\mock_variable_64.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise>
				<munit-tools:fail doc:name="Fail"
					doc:id="0d3a62fd-333f-43c3-a6de-0f7827d4fbc3"
					message="There are no more events to mock" />
			</otherwise>
		</choice>
	</flow>
	<munit:test name="enquiry_EmailFlow-test"
		doc:id="b0608dd3-fef3-4ad3-bd17-abac3e9ac544">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Delete the Record"
				doc:id="48504ac5-d24a-4c7a-baba-75ed80beefe8"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e62b3ed5-0dfa-45ba-9734-fd76606a85b9"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call
					flow="mock-http:request" />
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Send Email"
				doc:id="2246a933-bd09-46f6-8598-6ac3b2c1fe47" processor="email:send">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e563d88b-f9af-4a2c-ae22-57eee3737f86"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-email:send" />
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch Product Quantity Details "
				doc:id="fcaec395-0e3a-4584-a8ab-4f666b301e5b"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="93f3a84f-b019-4aca-8c1c-5b6647a5e614"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call
					flow="mock-http:request1" />
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Fetch All Enquires"
				doc:id="536e23c0-048f-4328-ba86-040842cd9a52"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="933897aa-365d-4d70-a1e3-f5b42cb4ecb3"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call
					flow="mock-http:request2" />
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="5c09c430-6f1d-40c8-aff7-41f9e6451548">
				<munit:payload
					value="#[readUrl('classpath://enquiryEmailFlowtest\set-event_payload.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to enquiry_EmailFlow"
				doc:id="750edd1e-6913-4818-8e19-c46752fd7e9b"
				name="enquiry_EmailFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="bf27fd3d-cf20-455e-b007-bba16767d874"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import enquiryEmailFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-paymentFlowExsistinguser-test1"
		doc:id="955e44d7-c7e6-4299-b62c-b0f8c5dc6172">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Update orderDetails,cartDetails Database and Response"
				doc:id="f26d93f1-3c2f-42a9-83e6-837135158131" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b22ef995-bb46-49c8-8b1b-7e61e28fc93a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock process Payment and card Details"
				doc:id="c1272e4c-5017-44ac-a271-a48d5cc1a56e" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1a5e0621-b933-47e3-b796-9f3bb95353c8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_11.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock update User Details"
				doc:id="4eb05368-c9b2-4a15-b799-2ebfdb61e3ed" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="2f2f5ee3-6bbe-4670-be1f-1b6b6a0061b1"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_19.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_22.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_25.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_26.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Existing Customer Details"
				doc:id="ce151ab1-f1e1-4a24-ae96-79c3886091fb"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="150237ab-dc97-4ee0-a4cc-ed871802ae10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload3.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_27.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_30.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="020af300-1997-42e9-b48b-fffa6bd2cbf3">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://propaymentFlowtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://propaymentFlowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-paymentFlow"
				doc:id="cd55dc34-3f10-4d69-aaff-5d773968c7c3" name="pro-paymentFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="69e2c3ad-3b88-43d5-822d-3a85da216700"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import propaymentFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-paymentFlowGuestuser-test1"
		doc:id="db84c53f-3ffa-439d-ac62-6c645af35313">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Update orderDetails,cartDetails Database and Response"
				doc:id="1237853e-df4e-4cdd-8465-4c3a58a9b10d" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b22ef995-bb46-49c8-8b1b-7e61e28fc93a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock process Payment and card Details"
				doc:id="ba352365-447e-4ba0-8b5f-e2afaf8ffb25" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1a5e0621-b933-47e3-b796-9f3bb95353c8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_11.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock update User Details"
				doc:id="0c54a0ad-8414-407b-86ab-dd8098a9e338" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="2f2f5ee3-6bbe-4670-be1f-1b6b6a0061b1"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_19.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_21.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_22.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_25.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_26.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Existing Customer Details"
				doc:id="a2064aa2-860c-4a98-8247-7ddd929f4729"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="150237ab-dc97-4ee0-a4cc-ed871802ae10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\mock_payload3.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowtest\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowtest\mock_variable_27.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowtest\mock_variable_30.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="add5e8b4-6165-4305-a186-a5224fd10fd6">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://propaymentGuestFlowtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://propaymentGuestFlowtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://propaymentGuestFlowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-paymentFlow"
				doc:id="5c6f96ec-7906-4b05-bdfb-6ae310a0ae0a" name="pro-paymentFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="0b15c7cc-956b-49c6-9855-7599371c3153"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import propaymentFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-paymentFlowExsistinguser-test"
		doc:id="45d27bea-fc5b-4e8c-bf1d-128a9d99a9b0">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Existing Customer Details"
				doc:id="898ad63a-2c60-4cdb-b108-7a2e668f8954"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="150237ab-dc97-4ee0-a4cc-ed871802ae10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://propaymentFlowErrortest1\mock_payload3.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://propaymentFlowErrortest1\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://propaymentFlowErrortest1\mock_variable_27.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://propaymentFlowErrortest1\mock_variable_28.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowErrortest1\mock_variable_29.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://propaymentFlowErrortest1\mock_variable_30.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="5adcd92a-eb69-44d3-88f5-02eb5bd7bc1f">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://propaymentFlowErrortest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://propaymentFlowErrortest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://propaymentFlowErrortest1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="0c562f20-023e-4f72-8c4d-b0ee1c9ffa35">
				<flow-ref doc:name="Flow-ref to pro-paymentFlow"
					doc:id="52d1600b-52ff-465b-927f-4d946f5db047"
					name="pro-paymentFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="84572419-c549-49e4-b8c6-e19de45f20f7">
						<logger level="INFO" doc:name="Logger"
							doc:id="d223a0a9-34bb-49cf-9339-7556a1611a90" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="91c01fe2-6554-4a19-a941-1569906674a3"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import propaymentFlowErrortest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateUserDetails-test"
		doc:id="bb4ab74e-875a-437c-892a-62d5495d8f00">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Add new card details to database"
				doc:id="8fb7be84-b459-435a-959b-9bc6b7b23465"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="9ded4e69-c349-409b-b1bc-f92aa075ec35"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailstest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailstest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailstest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Publish"
				doc:id="fdf99b65-5f06-4246-b8a0-a5a8054acdb5" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6eccaba0-e9b0-453c-8ca4-e8cdbf910b9d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailstest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailstest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailstest\mock_variable_10.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="c2417c3e-b2f1-45d4-9051-29b119858a85">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateUserDetailstest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateUserDetailstest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateUserDetailstest\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateUserDetails"
				doc:id="c48fa286-a545-4935-a567-71dc0b2b6feb"
				name="updateUserDetails" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="513982ec-bcef-457e-9952-d633fab6e1c6"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateUserDetailstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="processPaymentDetails-test"
		doc:id="3f511352-8094-4fae-972c-62537520b19e">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Cart Details for the User"
				doc:id="24a9c1a1-181b-4e7e-bc27-6c8ddb2eadda"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1163c8f6-7a2e-4b14-b6a6-e517fd30879e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://processPaymentDetailstest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://processPaymentDetailstest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://processPaymentDetailstest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="9315f1b4-9f97-4391-afe8-3a70afcfd3f7">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://processPaymentDetailstest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://processPaymentDetailstest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://processPaymentDetailstest\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to processPaymentDetails"
				doc:id="9bf3502e-b851-413f-8adc-c91dab211894"
				name="processPaymentDetails" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="9bd372db-5448-4a23-9f06-dd05578c63c3"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import processPaymentDetailstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="processPaymentDetails-errortest1"
		doc:id="da671cd5-5246-4c91-ab9d-dc11e4d9ccbc">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Cart Details for the User"
				doc:id="0202d383-9f52-4c84-bfba-6375b57dd22c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1163c8f6-7a2e-4b14-b6a6-e517fd30879e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://processPaymentDetailstest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://processPaymentDetailserrortest1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://processPaymentDetailserrortest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="574e8faf-0fa3-48d6-a581-434f43a0958b">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://processPaymentDetailserrortest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://processPaymentDetailserrortest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://processPaymentDetailserrortest1\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest1\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="781ed81d-34d0-4418-adaf-35d2e0a9039a">
				<flow-ref doc:name="Flow-ref to processPaymentDetails"
					doc:id="970ff380-6c64-49ef-9f6c-9ff935e595e7"
					name="processPaymentDetails" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="8adf08ca-f398-445b-80be-d36c80e18851">
						<logger level="INFO" doc:name="Logger"
							doc:id="8fba36fe-3228-4510-9bef-bb45a3dca8e4" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="5aa15a47-eb49-4a74-8cc9-e2a883304bb8"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import processPaymentDetailserrortest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="processPaymentDetails-errortest3"
		doc:id="fb2ea43e-872a-4e3b-b46b-53f58b9cb41d">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Cart Details for the User"
				doc:id="1203fb61-c479-4c42-85c5-1338b824d918"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1163c8f6-7a2e-4b14-b6a6-e517fd30879e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://processPaymentDetailserrortest3\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://processPaymentDetailserrortest3\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://processPaymentDetailserrortest3\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="453fe2f1-0d6d-4b61-9b12-3b4273db208c">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://processPaymentDetailserrortest3\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://processPaymentDetailserrortest3\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://processPaymentDetailserrortest3\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest3\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="3af2f442-0317-4148-b145-df7962b860a6">
				<flow-ref doc:name="Flow-ref to processPaymentDetails"
					doc:id="ff5ebc46-caab-40f4-8bca-2b5631bbbc29"
					name="processPaymentDetails" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="fe2895a3-1b93-4b7b-9482-dc1d97186d0b">
						<logger level="INFO" doc:name="Logger"
							doc:id="8c6af60a-adba-4d5a-87cc-01eae377f735" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="c1368b31-1d1e-4fe9-bf2d-912791ca75cc"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import processPaymentDetailserrortest3::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="processPaymentDetails-test1"
		doc:id="583ec6e1-4940-42b5-8618-6cfdac9eed14">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Cart Details for the User"
				doc:id="75632b24-d136-4cf5-9752-bfca92ab7bc3"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1163c8f6-7a2e-4b14-b6a6-e517fd30879e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://processPaymentDetailstest1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://processPaymentDetailstest1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://processPaymentDetailstest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="6d920ca7-c337-44ac-b6a4-946173c5fba8">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://processPaymentDetailstest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://processPaymentDetailstest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://processPaymentDetailstest1\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailstest1\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to processPaymentDetails"
				doc:id="62902078-787f-46f1-a007-a0e02206d16d"
				name="processPaymentDetails" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="b9ebe072-b5d4-4f62-b416-e00958f1ed57"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import processPaymentDetailstest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="processPaymentDetails-errortest"
		doc:id="19657508-4532-4f0e-a8d7-5e6bda365f3a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Cart Details for the User"
				doc:id="ce1829ad-e49a-4813-af98-376f23825846"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1163c8f6-7a2e-4b14-b6a6-e517fd30879e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="b1626f6e-df53-4157-9933-815e264f7f26">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://processPaymentDetailserrortest2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://processPaymentDetailserrortest2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest2\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://processPaymentDetailserrortest2\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest2\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest2\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest2\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://processPaymentDetailserrortest2\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="86e47c82-f574-4fe3-a345-e374f573f90d">
				<flow-ref doc:name="Flow-ref to processPaymentDetails"
					doc:id="a3ad013f-da22-42bd-8d97-051b9f93163e"
					name="processPaymentDetails" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="c263a1ba-8bd3-4714-9cb0-9ee6e9659862"
						type="HTTP:CONNECTIVITY">
						<logger level="INFO" doc:name="Logger"
							doc:id="ae549b1f-6838-48e6-a091-2d29ea9d4aaf" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="c97613a6-73cd-44c9-993d-4f85e81ae21f"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="bb466086-b9d8-4dbe-b1b2-e2c963191c5b"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDatabase-test"
		doc:id="b0448080-b977-4390-b8a1-3489b434d0ca">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Modifying cart details"
				doc:id="7189f275-a832-42af-a4ee-85fb638fc8f0"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6a560dc7-478e-4a90-a2b6-d899da662c56"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDatabasetest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDatabasetest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDatabasetest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Saving the orderHistory to SFDC"
				doc:id="75cf94be-9df0-41c5-848b-912dfcc94370"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="00f1edcd-cc31-4288-b28d-712b71791b8e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDatabasetest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDatabasetest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDatabasetest\mock_variable_11.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="8321cd67-98a7-40b2-bfc1-e9a8f820d939">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDatabasetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDatabasetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDatabasetest\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="response"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_8.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateDatabase"
				doc:id="7e8c4788-614b-418a-93e6-937cb72614fd" name="updateDatabase" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="85b3f4a8-b751-49e6-b4b0-55432650650d"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDatabasetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDatabase-errortest"
		doc:id="adaad776-4ff3-4a5d-a1aa-62d6544a0dd7">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Modifying cart details"
				doc:id="674068cf-7b47-44ee-a0ae-c7381f1d68f0"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6a560dc7-478e-4a90-a2b6-d899da662c56"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDatabaseerrortest1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDatabaseerrortest1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDatabaseerrortest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Saving the orderHistory to SFDC"
				doc:id="6883d6ea-7347-4fb0-9611-19b0b95064a0"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="00f1edcd-cc31-4288-b28d-712b71791b8e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDatabaseerrortest1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDatabaseerrortest1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDatabaseerrortest1\mock_variable_11.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="3210088c-3330-4674-a4c7-ccb60e0d0d3a">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDatabaseerrortest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDatabaseerrortest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDatabaseerrortest1\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="response"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateDatabaseerrortest1\set-event_variable_8.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="58bc5c7b-d740-4d1b-80a9-6796b3e2caef">
				<flow-ref doc:name="Flow-ref to updateDatabase"
					doc:id="7ccb34dd-2e6a-422c-bc7e-e85b5fa2196b" name="updateDatabase" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="11887bf4-0dab-491b-95a5-e7989a7c3272">
						<logger level="INFO" doc:name="Logger"
							doc:id="4c35d3d8-ac3e-4429-a8ce-92c325585a63" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="50207b95-1415-4e9e-8f65-5342d8012b3e"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateDatabaseerrortest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDatabase-errortest1"
		doc:id="5b3668db-5d7d-4d84-8ff8-10503e02a764">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Saving the orderHistory to SFDC"
				doc:id="d93e8f5e-6908-49a0-a911-47aa854c23f7"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="00f1edcd-cc31-4288-b28d-712b71791b8e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="8418388c-1e37-4b3b-bfc2-0cef3c1dc256">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDatabasetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDatabasetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDatabasetest\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="response"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_8.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="dcae456e-7e03-40f4-909b-5e941b5672c1">
				<flow-ref doc:name="Flow-ref to updateDatabase"
					doc:id="e9494146-2537-49d1-998f-9979ceacab02" name="updateDatabase" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="820dfa95-5384-4904-8a25-64840c033056"
						type="HTTP:CONNECTIVITY">
						<logger level="INFO" doc:name="Logger"
							doc:id="898b8b3a-0681-40d0-a10f-d072f1684a2a" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="8f4d8343-602e-43fa-af50-e34f4a43c14d"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e1150935-ac46-4764-b05b-d3bfa7100626"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="updateDatabase-errortest2"
		doc:id="89c7e07c-7abe-4980-9b37-fdef1bd5a729">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Modifying cart details"
				doc:id="21d230fc-3c96-4eea-b108-d2bb0852fc6f"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6a560dc7-478e-4a90-a2b6-d899da662c56"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Saving the orderHistory to SFDC"
				doc:id="1df1a9dd-1379-4a8c-83f5-8e0fa4b37680"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="00f1edcd-cc31-4288-b28d-712b71791b8e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateDatabasetest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateDatabasetest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateDatabasetest\mock_variable_11.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_18.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateDatabasetest\mock_variable_19.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="b3620d86-14e1-413c-afd4-aa0cf4cc31f4">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateDatabasetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateDatabasetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateDatabasetest\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="response"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateDatabasetest\set-event_variable_8.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="9226dc1a-aded-4a9e-9a6b-9b2fe50ad3bf">
				<flow-ref doc:name="Flow-ref to updateDatabase"
					doc:id="67d8e464-8998-4493-8f25-2bf72cb9a3e8" name="updateDatabase" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="c5d592b7-66e4-463d-8bd5-3a468242ac90"
						type="HTTP:CONNECTIVITY">
						<logger level="INFO" doc:name="Logger"
							doc:id="b0cf23c8-14b1-4d8a-b4bc-640b67d78c75" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="c61ac451-0d1b-4ed0-a3d7-59c91b386c87"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7432a9e1-a675-42d6-9821-9c52aa244140"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="updateUserDetails-guesttest"
		doc:id="e04920d9-f41a-4197-a5b6-cce72637a9d3">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Save new user Details to Database"
				doc:id="5a31ac5b-fc0c-4f50-80c1-cc378d816580"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="af992072-8e27-4539-b9a8-d7a66b52bfc2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailstest1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailstest1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailstest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Publish"
				doc:id="3ed8d0a2-43b2-4bd6-8db5-761ad9f433ca" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="d5ef5244-edc4-4eb7-971d-998905c36e85"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailstest1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailstest1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailstest1\mock_variable_6.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="c3a69c6f-a6b8-49dc-a9f8-5b79dc38f40a">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateUserDetailstest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateUserDetailstest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateUserDetailstest1\set-event_variable_.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateUserDetails"
				doc:id="ade2c0e4-4c91-4234-b491-8adc67e719bd"
				name="updateUserDetails" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="c7d1a629-5613-4ff5-8e5e-135245a0d6d4"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateUserDetailstest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateUserDetails-test2"
		doc:id="3d23ac86-2a7a-4cf9-8aed-735c54941b20">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="1463913c-2c52-4b5a-88d2-4beddd9b1696">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateUserDetailstest2\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateUserDetailstest2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateUserDetailstest2\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest2\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateUserDetails"
				doc:id="dda4135b-efed-4056-ad55-7f835913cba1"
				name="updateUserDetails" />
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="265fff3d-0a4e-4509-b72d-8c5dd662b16c"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="75c5ffa9-c71b-4916-a3c7-b7aa496493e5"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>

		</munit:validation>
	</munit:test>
	<munit:test name="updateUserDetails-guesttest1"
		doc:id="f51adbd9-7b65-436b-b80e-a6388bb84d1e">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Save new user Details to Database"
				doc:id="4f8e48fc-5434-4306-81c3-35cd3805f228"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="af992072-8e27-4539-b9a8-d7a66b52bfc2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailsGuesttest1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailsGuesttest1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Publish"
				doc:id="79fb41d6-6d06-4a90-9614-6d61739f4289" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="d5ef5244-edc4-4eb7-971d-998905c36e85"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailsGuesttest1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailsGuesttest1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_6.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="6d0d4138-6852-4703-bc7e-f30ccb7b037c">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateUserDetailsGuesttest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateUserDetailsGuesttest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateUserDetailsGuesttest1\set-event_variable_.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateUserDetailsGuesttest1\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="52e42ee9-67e8-4e02-9ee4-12eb931c2a32">
				<flow-ref doc:name="Flow-ref to updateUserDetails"
					doc:id="be636b76-69e7-40e6-966e-7ccf0a6c5008"
					name="updateUserDetails" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="4fd10ffb-d8e5-4cbe-94a3-9bd0cf45b368">
						<logger level="INFO" doc:name="Logger"
							doc:id="6c1b794d-906d-4a13-b3e5-e8bd347b3bac" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>

		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="10e3f554-61ba-46d2-b029-20d4278862a8"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateUserDetailsGuesttest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<flow name="mock-vm:publish"
		doc:id="b8694047-0dd3-4368-875a-96ade963c547">
		<try doc:name="Try" doc:id="c05ec8bb-0a47-473c-a0b3-fe44d6406bde">
			<munit-tools:retrieve doc:name="Retrieve"
				doc:id="8bfbb7ff-b75c-4544-8c84-c04c2c617fd1"
				key="Mock Publish the unbooked products " />
			<error-handler>
				<on-error-continue enableNotifications="false"
					logException="false" doc:name="On Error Continue"
					doc:id="a8106d3e-ed6e-433e-b70d-bc6a0f7f72fc" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload"
						doc:id="83d7cd70-5175-4054-aef8-bd56621a8894" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store"
			doc:id="37ccfada-1de0-4b0f-b80d-6ee7defdb5e0"
			key="Mock Publish the unbooked products ">
			<munit-tools:value><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice"
			doc:id="48a3647c-b25b-4be5-b6b1-d234444edcd7">
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event"
					doc:id="3ed505df-278a-4067-be12-f0919d9b5c3f">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://cartUpdateFlowtest\mock_payload3.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="externalId"
							value="#[output application/java --- readUrl('classpath://cartUpdateFlowtest\mock_variable_6.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems"
							value="#[output application/json --- readUrl('classpath://cartUpdateFlowtest\mock_variable_7.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event"
					doc:id="fa84b11e-544b-4bf1-9241-ed2cec5f3fd6">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://cartUpdateFlowtest\mock_payload4.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:variables>
						<munit:variable key="externalId"
							value="#[output application/java --- readUrl('classpath://cartUpdateFlowtest\mock_variable_8.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems"
							value="#[output application/json --- readUrl('classpath://cartUpdateFlowtest\mock_variable_9.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise>
				<munit-tools:fail doc:name="Fail"
					doc:id="60b976f3-33ce-4ca6-bfa9-bae6e8dc1c4b"
					message="There are no more events to mock" />
			</otherwise>
		</choice>
	</flow>
	<munit:test name="cartUpdateFlow-test"
		doc:id="faccbe6b-7e93-4b7b-9682-6d968bfc726b">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Get all cart Details"
				doc:id="f6eb85c7-532e-4182-a5e7-99144f5790f5"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="76ba20a0-8782-4172-981c-5b99ec788ba8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://cartUpdateFlowtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://cartUpdateFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Modify the Cart"
				doc:id="01856864-9d8f-4cf1-9bb3-f0d1ae4b2066"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="ede86aac-5d4f-44b0-a800-b1c712863f0f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call
					flow="mock-http:request3" />
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Publish the unbooked products "
				doc:id="3b45883a-efd4-4e35-a984-6872f9ca3063" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e912e8c9-f2ed-4005-bc2a-c9c9b29e081a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-vm:publish" />
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="6c244373-dafc-4393-8d28-0e94bb25d02c">
				<munit:payload
					value="#[readUrl('classpath://cartUpdateFlowtest\set-event_payload.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to cartUpdateFlow"
				doc:id="e97e1d7a-280b-408a-ae91-1d2abee8954e" name="cartUpdateFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="5d4d3c75-11c7-49dc-a3ae-260603cdd691"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import cartUpdateFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<flow name="mock-http:request3"
		doc:id="5d804d62-a1dd-443b-b77d-bf70bcc60d29">
		<try doc:name="Try" doc:id="ae8f9264-3418-4f15-addb-10b1af6b4f04">
			<munit-tools:retrieve doc:name="Retrieve"
				doc:id="08e5578e-a0b9-4324-85fa-4aa0f1393ab4"
				key="Mock Modify the Cart" />
			<error-handler>
				<on-error-continue enableNotifications="false"
					logException="false" doc:name="On Error Continue"
					doc:id="331e2d6d-3e39-4374-a9a3-ea3a91a4cbf6" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload"
						doc:id="5cf8751c-e825-4197-bce1-d74e0707ac87" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store"
			doc:id="f998803e-170b-49a4-8146-79580d815082"
			key="Mock Modify the Cart">
			<munit-tools:value><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice"
			doc:id="05679cb6-d668-4b74-bcf1-3e7a7a9f2d3c">
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event"
					doc:id="0da492a1-43a8-4041-8397-240726ad221a">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://cartUpdateFlowtest\mock_payload1.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:attributes
						value="#[readUrl('classpath://cartUpdateFlowtest\mock_attributes1.dwl')]" />
					<munit:variables>
						<munit:variable key="items"
							value="#[output application/json --- readUrl('classpath://cartUpdateFlowtest\mock_variable_.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="externalId"
							value="#[output application/java --- readUrl('classpath://cartUpdateFlowtest\mock_variable_1.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems"
							value="#[output application/json --- readUrl('classpath://cartUpdateFlowtest\mock_variable_2.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event"
					doc:id="c4cb3a97-21fb-4194-9bf0-58779d401e8b">
					<munit:payload
						value="#[output application/json  --- readUrl('classpath://cartUpdateFlowtest\mock_payload2.dwl')]"
						encoding="UTF-8" mediaType="application/json " />
					<munit:attributes
						value="#[readUrl('classpath://cartUpdateFlowtest\mock_attributes2.dwl')]" />
					<munit:variables>
						<munit:variable key="items"
							value="#[output application/json --- readUrl('classpath://cartUpdateFlowtest\mock_variable_3.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="externalId"
							value="#[output application/java --- readUrl('classpath://cartUpdateFlowtest\mock_variable_4.dwl')]"
							encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems"
							value="#[output application/json --- readUrl('classpath://cartUpdateFlowtest\mock_variable_5.dwl')]"
							encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise>
				<munit-tools:fail doc:name="Fail"
					doc:id="e99d62a4-605a-4cdd-a85f-0f5f11743969"
					message="There are no more events to mock" />
			</otherwise>
		</choice>
	</flow>
	<munit:test name="productQuantityUpdate-test"
		doc:id="71db221f-d8b9-45e9-8d17-7de51253f262">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="3a93a459-4b4e-4afc-8b41-d281ac13db9e">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://productQuantityUpdatetest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://productQuantityUpdatetest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to productQuantityUpdate"
				doc:id="48fd0670-90ac-438e-ba3b-6530cef190a6"
				name="productQuantityUpdate" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="4ca37d8b-1efb-4aac-8320-96c9b687ea8c"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import productQuantityUpdatetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="productQuantityUpdate-test1"
		doc:id="e0aa3286-e564-48e4-bbec-4e2b50dd6b9e">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Get The product quantity"
				doc:id="7ca0f156-89e4-4c8b-85d2-cbe9076d0794"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b2bedb1c-887a-449e-9eae-b22e9cc3f283"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productQuantityUpdatetest1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="quantity"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Unbook the product quantity in SFDC"
				doc:id="28050b80-b8d4-4479-8eb8-90fe91358730"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8837120f-3be4-4af2-8873-d572aa7cad35"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productQuantityUpdatetest1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="quantity"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Unbook the product quantity in local"
				doc:id="66625fda-839f-45fa-bbfb-3c39157edb33"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e2545f69-190c-4e15-b7be-fc68cf404aa6"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://productQuantityUpdatetest1\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://productQuantityUpdatetest1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="quantity"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://productQuantityUpdatetest1\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="61836c20-5e6b-4ecd-b440-a5ba6298c7a4">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://productQuantityUpdatetest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://productQuantityUpdatetest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to productQuantityUpdate"
				doc:id="023e7d80-0f91-49c3-9fa1-2fc7df3ff9da"
				name="productQuantityUpdate" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="ac995ee7-b878-4fcb-abdd-1184b1441026"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import productQuantityUpdatetest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="schedular-test-suite-asyncUpdateFlowTest"
		doc:id="a39ad2a9-abf4-43a1-a738-f06dcf1b0bf3" description="Test">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="725d64e8-9a04-443a-ba64-e88d9ded9e52"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="19df0aab-f650-4105-8fe6-5a8d18e6ecbd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="11d98dee-5e21-4e2b-a889-681c1860f7d3"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="521eb0b0-093f-4597-bb6d-cc4aa503ce68"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://asyncUpdateFlowtest1\mock_payload.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="customerDetails"
							value="#[readUrl('classpath://asyncUpdateFlowtest1\mock_variable2.dwl')]" />
						<munit-tools:variable key="location"
							value="#[readUrl('classpath://asyncUpdateFlowtest1\mock_variable3.dwl')]" />
						<munit-tools:variable key="customerId"
							value="#[readUrl('classpath://asyncUpdateFlowtest1\mock_variable4.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="627a3649-530a-49c5-8ffb-a969f81c0f67" processor="vm:consume">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c567937a-2ac3-43cf-8798-c48044531c6f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://asyncUpdateFlowtest1\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="customerId"
							value="#[readUrl('classpath://asyncUpdateFlowtest1\mock_variable3.dwl')]" />
						<munit-tools:variable key="location"
							value="#[readUrl('classpath://asyncUpdateFlowtest1\mock_variable4.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event"
				doc:id="36d4db2a-366a-4cdf-806b-59e6b562db99">
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://asyncUpdateFlowtest1\set-event_attributes.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to asyncUpdateFlow"
				doc:id="acfbe31c-341a-46f2-8404-210faab06b47" name="asyncUpdateFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="511b3d4b-891c-405b-9726-509d6d434752"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="19df0aab-f650-4105-8fe6-5a8d18e6ecbd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="schedular-test-suite-asyncUpdateFlowTest1"
		doc:id="c4be827a-f93e-4114-8632-f2bbbb216f9a" description="Test">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="2cbf0bac-e292-44f4-9269-49e5aa77415b"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="529c425a-4fad-4c71-90f7-042ec08a30d2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when2"
				doc:id="8521d9a6-b56e-4dc6-a0d8-75552b0a8811" processor="vm:consume">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c567937a-2ac3-43cf-8798-c48044531c6f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://asyncUpdateFlowtest2\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="customerId"
							value="#[readUrl('classpath://asyncUpdateFlowtest2\mock_variable3.dwl')]" />
						<munit-tools:variable key="location"
							value="#[readUrl('classpath://asyncUpdateFlowtest2\mock_variable4.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event"
				doc:id="d255b40d-5de2-4252-bf67-2d73e85d468d">
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://asyncUpdateFlowtest1\set-event_attributes.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to asyncUpdateFlow"
				doc:id="7d3665bf-25ad-4d55-864d-c50efc403fdc" name="asyncUpdateFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="062d7185-750d-4cf4-a8ec-55daecc62766"
				processor="http:request" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="529c425a-4fad-4c71-90f7-042ec08a30d2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="schedular-test-suite-asyncUpdateFlowTest2"
		doc:id="656ba168-fec8-40fe-a2f8-c50662715926" description="Test">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Consume Queue"
				doc:id="a493cf1a-0659-45f3-8476-55f64aaf7bfb" processor="vm:consume">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="c567937a-2ac3-43cf-8798-c48044531c6f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://asyncUpdateFlowtest3\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="customerId"
							value="#[readUrl('classpath://asyncUpdateFlowtest3\mock_variable3.dwl')]" />
						<munit-tools:variable key="location"
							value="#[readUrl('classpath://asyncUpdateFlowtest3\mock_variable4.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event"
				doc:id="9f616372-3c62-4844-aa4f-c95f100472b2">
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://asyncUpdateFlowtest3\set-event_attributes.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to asyncUpdateFlow"
				doc:id="d94e5aba-aa40-4df4-ac76-057f28c6d9b1" name="asyncUpdateFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="f4b8e35e-8a3c-455a-8535-e211260eb71e"
				processor="logger" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f8c79154-6716-48a0-aed5-cce8ad1839ee"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="updateUserDetails-guesttest2"
		doc:id="24871b8e-0b5c-430b-8469-52947b836417">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Save new user Details to Database"
				doc:id="f969424e-e3f2-4772-9e06-116c7b74d11c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="af992072-8e27-4539-b9a8-d7a66b52bfc2"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Publish"
				doc:id="dffc46ef-41b7-4bd2-980e-b6ddfe2a766e" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="d5ef5244-edc4-4eb7-971d-998905c36e85"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailstest1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailstest1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailstest1\mock_variable_6.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="d2a40eed-6252-49bb-bb56-c23e566174a7">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateUserDetailstest1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateUserDetailstest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateUserDetailstest1\set-event_variable_.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_1.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest1\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="31baeea6-ec43-4f64-887f-78a593287f72">
				<flow-ref doc:name="Flow-ref to updateUserDetails"
					doc:id="13134527-30d1-468b-afe8-ccf443f513ca"
					name="updateUserDetails" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="f6b153c5-451c-4974-a228-5f8dfd6bc909"
						type="HTTP:CONNECTIVITY">
						<logger level="INFO" doc:name="Logger"
							doc:id="7ec244b3-01c3-4231-b4e1-ef31ae63914b" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="8d31d10f-f8b9-43fd-9cb5-8ad83bfc56ff"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e118b386-740a-43fe-8775-fe8d6cf6264d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="updateUserDetails-test1"
		doc:id="93b68176-1129-4569-8f4f-be52dbbef7d9">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Add new card details to database"
				doc:id="51d36c0f-86c0-4703-8ceb-39915cade788"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="9ded4e69-c349-409b-b1bc-f92aa075ec35"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Publish"
				doc:id="f6ca7343-9bd0-45d3-af6c-7dc275e23786" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6eccaba0-e9b0-453c-8ca4-e8cdbf910b9d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateUserDetailstest\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateUserDetailstest\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateUserDetailstest\mock_variable_10.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_11.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_12.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_14.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_15.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://updateUserDetailstest\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="f9329523-f03e-450b-ac20-85d9667491fa">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateUserDetailstest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateUserDetailstest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="card"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateUserDetailstest\set-event_variable_1.dwl')]" />
					<munit:variable key="productId"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="cartDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="location"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_4.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="customerDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_5.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="paymentDetails"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_6.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="purchasedProduct"
						value="#[output application/json --- readUrl('classpath://updateUserDetailstest\set-event_variable_7.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="07699e7d-c953-4a80-b134-8dd99551596e">
				<flow-ref doc:name="Flow-ref to updateUserDetails"
					doc:id="718a9eb4-3617-43a1-8b6c-3eec09da39e1"
					name="updateUserDetails" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="a0e4759f-0763-4ad9-82cf-f85fa07dac3f"
						type="HTTP:CONNECTIVITY">
						<logger level="INFO" doc:name="Logger"
							doc:id="aca71459-39a0-4b23-abcf-00eec04cd946" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="4c117ddf-a57e-45ef-a592-228d75b315a6"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="cf15d59f-dce4-4570-a527-ee15e2c20020"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-paymentFlowExsistinguser-test2"
		doc:id="b7531324-527f-4692-b4f5-374eb5aff827">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Existing Customer Details"
				doc:id="7bcb7029-ab0a-4a46-87d6-ae32f38599f8"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="150237ab-dc97-4ee0-a4cc-ed871802ae10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="20b07071-97f6-49c1-a98a-7901364df909">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://propaymentFlowtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://propaymentFlowtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://propaymentFlowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="e39153e3-2717-4e76-824b-7572e903a3fd">
				<flow-ref doc:name="Flow-ref to pro-paymentFlow"
					doc:id="eb2baf71-5778-4b48-afb2-016c54259d05"
					name="pro-paymentFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="3f004fa8-abe4-4d3c-adb3-44b05d9748da"
						type="HTTP:CONNECTIVITY">
						<logger level="INFO" doc:name="Logger"
							doc:id="2a8f6327-227c-4e20-93cc-19b2ab9373ef" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify call" doc:id="97b6ab5e-0626-480d-a427-72876e88a460"
				processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="69f5ffad-86a9-43e7-b140-e3493a5afb18"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="pro_closed_complaintFlow-None-Success"
		doc:id="fe87c315-4908-40d8-bb04-7da67e1565bb">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="adcabf34-2628-421e-aad7-61393f3f6dd9"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="cf1dc306-c6bb-4d34-8762-c951f740ea3e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowNoneSuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proclosedcomplaintFlowNoneSuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proclosedcomplaintFlowNoneSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="complaintId"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowNoneSuccess\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="action"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowNoneSuccess\mock_variable_2.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="956e7cb0-1275-4bfa-b27e-0264e39dc665"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="36a7c137-5997-4df8-b0e1-d5100d5e6945"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowNoneSuccess\mock_payload2.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="cc193517-b2e8-4098-86b4-349c8c4e7a0f">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowNoneSuccess\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proclosedcomplaintFlowNoneSuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proclosedcomplaintFlowNoneSuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_closed_complaintFlow"
				doc:id="340dd64f-7ab8-4e4b-89d1-f840eb323533"
				name="pro_closed_complaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="a0a78829-4a38-4019-93cc-757d27a4ae60"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proclosedcomplaintFlowNoneSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

	<munit:test name="pro_closed_complaintFlow-Refund-Success"
		doc:id="9bc51ba3-55b1-48ef-8980-fd1cd11ef8d6">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="47720d6c-5cd7-401d-964e-f230477e042c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="cf1dc306-c6bb-4d34-8762-c951f740ea3e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowRefundSuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proclosedcomplaintFlowRefundSuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proclosedcomplaintFlowRefundSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="complaintId"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowRefundSuccess\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="action"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowRefundSuccess\mock_variable_2.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="c2f599e8-1445-4593-99bb-f07d5a3addc9"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="36a7c137-5997-4df8-b0e1-d5100d5e6945"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowRefundSuccess\mock_payload2.dwl')]" />
				</munit-tools:then-return>

			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="af6e80cc-33aa-418d-ac28-e38e4326d9d0">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowRefundSuccess\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proclosedcomplaintFlowRefundSuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proclosedcomplaintFlowRefundSuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_closed_complaintFlow"
				doc:id="b21e8335-d144-41de-a399-3a92c23eaede"
				name="pro_closed_complaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="9d9b9f61-4390-4833-ba50-e7a7af5a8c9f"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proclosedcomplaintFlowRefundSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

	<munit:test name="pro_closed_complaintFlow-Replace-Success"
		doc:id="2e01cf8b-26b7-4b92-82bf-7e9eda43efe2">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="d6820025-7c52-4fdd-868c-bc1582db34e2"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="cf1dc306-c6bb-4d34-8762-c951f740ea3e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="complaintId"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="action"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\mock_variable_2.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="60b0215f-da29-4770-8b4f-07d3fbeb0926"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="36a7c137-5997-4df8-b0e1-d5100d5e6945"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\mock_payload2.dwl')]" />
				</munit-tools:then-return>

			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="d0cd05db-8022-41bf-abe2-d251d87de986">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proclosedcomplaintFlowReplaceSuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_closed_complaintFlow"
				doc:id="dc557dd4-9dd3-461d-b3b8-f908466e2fd1"
				name="pro_closed_complaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="c4f8ed02-5260-4f32-8fe3-c03fdae69577"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proclosedcomplaintFlowReplaceSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

	<munit:test
		name="pro_closed_complaintFlow-ComplaintExists-Error"
		doc:id="a8195f78-521c-47fd-ac9d-7e1402e7ddbc">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="c192db3b-4180-48dd-9617-5ab9fb46b73b"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="cf1dc306-c6bb-4d34-8762-c951f740ea3e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\mock_variable_.dwl')]" />
						<munit-tools:variable key="complaintId"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="action"
							value="#[output application/java --- readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\mock_variable_2.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="c3f74f68-88ad-4f10-aa8c-3bc015be657e"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="36a7c137-5997-4df8-b0e1-d5100d5e6945"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\mock_payload2.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="7fd16d7b-f78e-4b47-bbda-ee6636a95390">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proclosedcomplaintFlowComplaintExistsError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="b4ca051a-0a4e-4450-905c-39678b13c07b">
				<flow-ref doc:name="Flow-ref to pro_closed_complaintFlow"
					doc:id="8a3c390c-e630-4ebe-92ed-22c0cfbdcdc4"
					name="pro_closed_complaintFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="a67c501c-51cf-4dc7-90e1-58b557e9050e">
						<logger level="INFO" doc:name="Logger"
							doc:id="19b8d298-440d-43be-b3ba-578a1962b244" message="continue" />
					</on-error-continue>
				</error-handler>
			</try>

		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="bf983014-c2d3-4fb9-8795-2833c93ad7ae"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proclosedcomplaintFlowComplaintExistsError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

	<munit:test name="pro_closed_complaintFlow-Any-Error"
		doc:id="4be16dcf-7e13-474a-a1cb-1e78714719a5">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="b8069caf-79a9-4e6b-8600-031846d56f93"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="cf1dc306-c6bb-4d34-8762-c951f740ea3e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:BAD_REQUEST" />
				</munit-tools:then-return>

			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="c10cabc4-c10b-45b5-836c-4d79920a7181">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proclosedcomplaintFlowAnyError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proclosedcomplaintFlowAnyError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proclosedcomplaintFlowAnyError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_closed_complaintFlow"
				doc:id="625398c2-bc08-491e-a4d3-626db186f7b6"
				name="pro_closed_complaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				doc:name="Assert that" doc:id="03965bfb-c8b1-4616-8b78-aab6f947ed6f"
				expression="#[payload]" is="#[MunitTools::nullValue()]" />

		</munit:validation>

	</munit:test>
	<munit:test name="pro_addComplaintFlow-Wrong_Items-Success"
		doc:id="19089187-2678-4f38-ae69-da0cf79d1b61">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="0f406c15-536c-4caa-a147-2183d9e30e99"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock add complaint details"
				doc:id="ae698c6f-12b0-4de3-9582-92872d68a6c2"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f116e90f-8b55-4a39-a0c8-d23a087a3f10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when1"
				doc:id="ce5df3c2-74c0-448e-ab84-f9c252ec1f2e"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="0da5e719-c01d-48d3-95ac-e80bfd79ea09"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_payload3.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="22e4fa83-88a1-4ec1-9d0a-127cfdd82270">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="44b9143b-f6a0-41db-9530-5548f18ab56e"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="a0985538-0420-43ec-b87e-b8ebae86554c"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddComplaintFlowWrongItemsSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>



	<munit:test
		name="pro_addComplaintFlow-CustomerId_Mismatch-Error"
		doc:id="7ea5f6cd-18c1-473a-80c3-3861b034908f">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="971b4af2-cdae-4228-a54a-4c05f4aa0d22"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock add complaint details"
				doc:id="a6e8843b-8fd8-4b50-a3ee-883801fd265d"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f116e90f-8b55-4a39-a0c8-d23a087a3f10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="b4520b72-9b65-451c-9acf-00d07b397ad2">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowCustomerIdMismatchError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="1baf5461-f4da-4fc5-beea-d2a82b622f82"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="60c4c905-d4e2-4f0b-b821-3a7a3f864d80"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddComplaintFlowCustomerIdMismatchError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>



	<munit:test
		name="pro_addComplaintFlow-InvalidQuantity-Error"
		doc:id="0dc6fa7e-2b44-4bce-880d-364ed8b282d4">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="997851f0-5ce1-45b4-bd80-37122eb9141c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock add complaint details"
				doc:id="23da5b36-94b9-472c-8729-e498739f8b5b"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f116e90f-8b55-4a39-a0c8-d23a087a3f10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="81360cd5-8ad3-4484-b105-634b56a0433d">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowInvalidQuantityError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowInvalidQuantityError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowInvalidQuantityError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="afc0fab4-0374-4384-8ae5-7eb021c954b7"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="3514cb40-d2ad-42cb-a3ae-1f3a4a74ee31"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddComplaintFlowInvalidQuantityError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>



	<munit:test name="pro_addComplaintFlow-InvalidStatus-Error"
		doc:id="454a6163-37c4-411d-ba14-1531e2b2de88">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="ef44f587-b091-47f2-a603-3ee745a91af4"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock add complaint details"
				doc:id="6c60c8f2-df4c-4190-a47a-9dcb962a2a1d"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f116e90f-8b55-4a39-a0c8-d23a087a3f10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="7c4515b8-454b-4a64-935e-a5a23a10ef3c">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowInvalidStatusError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowInvalidStatusError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowInvalidStatusError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="fc81af52-405c-42f4-9065-615b6211998b"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="7110ea34-3a76-48b0-bcbc-4d4f3306c53f"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddComplaintFlowInvalidStatusError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

	<munit:test name="pro_addComplaintFlow-ReturnPeriod-Error"
		doc:id="4195d71a-66a7-46fb-92b3-be1de043a7b1">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="aee6d229-ed34-4767-93e4-eab4337a2461"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock add complaint details"
				doc:id="7a7977d7-0288-4fc7-a1da-9c1b3da70d20"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f116e90f-8b55-4a39-a0c8-d23a087a3f10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="b5d523c2-90a3-433a-938c-e60b35c084d6">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowReturnPeriodError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowReturnPeriodError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowReturnPeriodError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="dc122e75-0628-422a-a5a1-b6f3679d45fa"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="83e0cf73-26e6-4eeb-9da3-9871ffcf61ed"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddComplaintFlowReturnPeriodError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


	<munit:test
		name="pro_addComplaintFlow-ComplaintExists-Error"
		doc:id="56218517-c7bf-4963-a517-497b25aeaa22">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="f6fe878c-2bb2-491d-830e-9b37cc059fc5"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock add complaint details"
				doc:id="bb6c50bb-c1a0-4da3-b25c-db0be135807a"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f116e90f-8b55-4a39-a0c8-d23a087a3f10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="33e516ac-b25b-45ca-b236-10a604e0cdc2"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="0da5e719-c01d-48d3-95ac-e80bfd79ea09"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\mock_payload3.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="f87843b2-10a0-496a-85ff-a862cf5de638">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowComplaintExistsError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowComplaintExistsError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowComplaintExistsError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>

		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="beef030b-2ed4-4f64-a7ac-31a3e37a6718"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="544160fc-0e9f-43bc-8929-b2d966d88ce0"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import proaddComplaintFlowComplaintExistsError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro_addComplaintFlow-Any-Error"
		doc:id="bc1db916-d758-412b-93bc-321c3e8670ff">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch orderDetails"
				doc:id="b4df8f1d-730f-4d28-af84-0c9ac7e93ad7"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3e12e691-0c43-4c76-b488-45bb2173d08f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:BAD_REQUEST" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://proaddComplaintFlowWrongItemsSuccess\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="1130eb39-ce7b-4492-8310-a2e973ac5af0">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://proaddComplaintFlowAnyError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://proaddComplaintFlowAnyError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://proaddComplaintFlowAnyError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro_addComplaintFlow"
				doc:id="3f3b0eb5-2f87-4c77-9ecb-73297d5426c1"
				name="pro_addComplaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				doc:name="Assert that" doc:id="7f9f4959-cad7-4366-a382-f843accbbed2"
				expression="#[payload]" is="#[MunitTools::nullValue()]" />
		</munit:validation>
	</munit:test>
	<munit:test name="pro-track_complaintFlow-success"
		doc:id="3338af6c-59ce-4fe0-b085-8f431b3bd29a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="73fa230c-bac9-4ee1-bfc8-5cfa1f1e8589"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="53939c0c-fef4-4eef-91a1-dc725ef83e1c"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://protrackcomplaintFlowsuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://protrackcomplaintFlowsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://protrackcomplaintFlowsuccess\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="4de4f74b-d346-466f-aa91-7de23e6d0d7b">
				<munit:payload
					value="#[readUrl('classpath://protrackcomplaintFlowsuccess\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://protrackcomplaintFlowsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://protrackcomplaintFlowsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-track_complaintFlow"
				doc:id="ff132b25-9c29-48d2-a667-b455b8b22f00"
				name="pro-track_complaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="ce17ebff-1a3f-45fb-8cbd-84bdec3cc681"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import protrackcomplaintFlowsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="pro-track_complaintFlow-Error"
		doc:id="d4301c1e-c361-4479-ac5a-15689df7ef6a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock fetch complaint details"
				doc:id="702ce58f-115c-44ad-8804-2aea3fba6fdb"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="26743d2f-de2b-417e-9a8c-d37887967012"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://protrackcomplaintFlowError\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://protrackcomplaintFlowError\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://protrackcomplaintFlowError\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>

			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="0f8e98c7-a2bf-450e-9141-756f8183f107">
				<munit:payload
					value="#[readUrl('classpath://protrackcomplaintFlowError\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://protrackcomplaintFlowError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://protrackcomplaintFlowError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to pro-track_complaintFlow"
				doc:id="e5941baf-de96-486d-b9fb-11539803c06f"
				name="pro-track_complaintFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="0214b5b9-d5b8-4fb1-bb38-8dc4b1da4dbc"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import protrackcomplaintFlowError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getCustomerDetailsFlow-test"
		doc:id="4ebc0efe-e850-4a12-a3ca-8c391b9e4ee5">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Fetch Customer Details"
				doc:id="2ce7142f-2fe8-424a-a53f-1fd3788ac17c"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="26743d2f-de2b-417e-9a8c-d37887967012"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getCustomerDetailsFlowtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getCustomerDetailsFlowtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getCustomerDetailsFlowtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="6855780a-7f5d-4add-abd5-b7212fdf2175">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://getCustomerDetailsFlowtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://getCustomerDetailsFlowtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getCustomerDetailsFlowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to getCustomerDetailsFlow"
				doc:id="12b4b8fb-8a11-4600-9177-bf117e888691"
				name="getCustomerDetailsFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="a9495d3a-8e7c-4d78-ae0c-03977ce9c946"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getCustomerDetailsFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getCustomerDetailsFlow-Error"
		doc:id="400683d2-eb8a-4283-aab1-916b53d059c3">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="3d0f2b49-61fd-4315-8055-db6060974109">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://getCustomerDetailsFlowtestError\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://getCustomerDetailsFlowtestError\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getCustomerDetailsFlowtestError\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="25f32451-4df3-4a56-b690-63e23cd08897">
				<flow-ref doc:name="Flow-ref to getCustomerDetailsFlow"
					doc:id="ca73135c-dc4e-411d-ac9e-16202dfbf3b6"
					name="getCustomerDetailsFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="192fbf8e-6edb-4a09-b525-954f6375cbc6">
						<logger level="INFO" doc:name="Logger"
							doc:id="d989e5cf-8abf-4020-8d87-8f9a581849c4" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="06ee4a92-9378-41f6-84f7-07e0ad4eb467"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getCustomerDetailsFlowtestError::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateCustomerDetails-test-case-1"
		doc:id="16ab0b35-98ee-456e-9dde-5366dfaf887a">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock Publish"
				doc:id="ecd6ac02-5613-4afd-94b8-1197f11d9a9e" processor="vm:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f5debac7-ba5e-4358-a1a1-458819a331f0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateCustomerDetailstestcase1\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateCustomerDetailstestcase1\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_.dwl')]" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="VcustomerID"
							value="#[output application/json --- readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Update the CustomerDetails in local database"
				doc:id="d82d561c-1401-4384-bc14-0ec7b39dddfd"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b3dbf223-b7d7-4d53-bf21-c10f45888925"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateCustomerDetailstestcase1\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateCustomerDetailstestcase1\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="VcustomerID"
							value="#[output application/json --- readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Retrieve Customer Details from sfdc"
				doc:id="e20d1f60-8662-46a7-8c2b-5200ea06c8e4"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="ded5a41b-b8e8-4556-b58a-61b8610f1b10"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://updateCustomerDetailstestcase1\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://updateCustomerDetailstestcase1\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_6.dwl')]" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="VcustomerID"
							value="#[output application/json --- readUrl('classpath://updateCustomerDetailstestcase1\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="571220ec-82fa-426b-8448-b22509fc0805">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://updateCustomerDetailstestcase1\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://updateCustomerDetailstestcase1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://updateCustomerDetailstestcase1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to updateCustomerDetails"
				doc:id="c925e4ac-f458-4dd8-9c50-9571a801255f"
				name="updateCustomerDetails" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="3666816e-8197-414f-8cc2-90a04edd4fcb"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import updateCustomerDetailstestcase1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="ordercanceleldFlow-test-success"
		doc:id="66e3b61d-339e-4e1d-be85-19e40d6f2827">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Update the OrderDetails in sfdc"
				doc:id="09f5a978-de43-4173-9a3e-19b94e49b23e"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="1bf40fb4-bd48-455d-8cce-db4b12542f7f"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_1.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock update product Quantity in sfdc"
				doc:id="7d85c1c2-4d2c-4225-b688-d4f41e7e8e63"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="853bde62-5a90-42b9-97b7-f8423666904e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_payload1.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_attributes1.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="available_quantity"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_5.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTittle"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_8.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderedQuantity"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_9.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock update product Quantity in local"
				doc:id="5d084bf5-79e9-4156-a688-65e51993b736"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="79ea9c52-aa0d-4f3b-950a-75de213f79bd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_payload2.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_attributes2.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_10.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="available_quantity"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_11.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_12.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_13.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTittle"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_14.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_15.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderedQuantity"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_16.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock fetch product Quantity"
				doc:id="e063d1c0-0518-480a-a7db-9cf01311b80f"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="600eb70b-dd5f-44e6-8761-9625d263514d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_payload3.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_17.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="available_quantity"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_18.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_19.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_20.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productTittle"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_21.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_22.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderedQuantity"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_23.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Retrieve order Details from sfdc"
				doc:id="6dc777aa-628e-42a7-887f-92200d39faf2"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6be44bbb-75a7-4155-a660-f7e8c9f44192"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_payload4.dwl')]"
						encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_25.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestsuccess\mock_variable_26.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="db82e665-8e1f-431d-bb1b-f795242af258">
				<munit:payload
					value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://ordercanceleldFlowtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to ordercanceleldFlow"
				doc:id="572c2178-8190-4f83-9550-57308f67edcd"
				name="ordercanceleldFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="0905a9c8-ae82-4d33-b19f-138a17c9b242"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import ordercanceleldFlowtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="ordercanceleldFlow-test-Error-1"
		doc:id="49f4d74a-404d-4877-8f3c-81eea0148e6b">
		<munit:behavior>
			<munit:set-event doc:name="Set Input"
				doc:id="8700984b-de9a-409d-ad31-2991a3cc5177">
				<munit:payload
					value="#[readUrl('classpath://ordercanceleldFlowtestError1\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://ordercanceleldFlowtestError1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://ordercanceleldFlowtestError1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="2e76297f-31e0-4753-990b-f1e33fee48e8">
				<flow-ref doc:name="Flow-ref to ordercanceleldFlow"
					doc:id="9c0c65cf-1b36-4edf-a850-7608bc37de04"
					name="ordercanceleldFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="e50f413e-0c0c-443a-a8e8-76639e557724">
						<logger level="INFO" doc:name="Logger"
							doc:id="fa8f86b2-45a5-4bf7-bbb3-0afd1e744b91" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="51f0279a-979f-4cdb-bd4b-56df334db3b6"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import ordercanceleldFlowtestError1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="ordercanceleldFlow-test-Error-2"
		doc:id="c4cae450-791b-420a-bcf6-c1baa5aa5109">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve order Details from sfdc"
				doc:id="7664856e-33c2-4a6d-8877-c268cdcee9c0"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6be44bbb-75a7-4155-a660-f7e8c9f44192"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://ordercanceleldFlowtestError2\mock_payload4.dwl')]"
						encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://ordercanceleldFlowtestError2\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestError2\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestError2\mock_variable_25.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestError2\mock_variable_26.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="c260275c-3f95-4e19-b092-2ce56156d49e">
				<munit:payload
					value="#[readUrl('classpath://ordercanceleldFlowtestError2\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://ordercanceleldFlowtestError2\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://ordercanceleldFlowtestError2\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="e88ca559-ec91-49b9-8c4b-90b56847d2e9">
				<flow-ref doc:name="Flow-ref to ordercanceleldFlow"
					doc:id="eaeeb9ef-3cae-4a84-9784-79daf1d525cd"
					name="ordercanceleldFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="2dc3a248-7095-47d5-8c34-1d49f8c79188">
						<logger level="INFO" doc:name="Logger"
							doc:id="f51a8d0f-9f7f-4b5d-8463-d95f48fcc15a" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="1fbf19a9-dd87-4331-af22-ca0a7aaf5d08"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import ordercanceleldFlowtestError2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="ordercanceleldFlow-test-Error-3"
		doc:id="d88b51bd-2b03-4a21-8e2b-e12336b09a9f">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Retrieve order Details from sfdc"
				doc:id="fd43962d-e5b4-43ed-a176-4454471bc345"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6be44bbb-75a7-4155-a660-f7e8c9f44192"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://ordercanceleldFlowtestError3\mock_payload4.dwl')]"
						encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://ordercanceleldFlowtestError3\mock_attributes3.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestError3\mock_variable_24.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://ordercanceleldFlowtestError3\mock_variable_25.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://ordercanceleldFlowtestError3\mock_variable_26.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="ecf76337-51c1-4c33-8d7a-25caa4b42966">
				<munit:payload
					value="#[readUrl('classpath://ordercanceleldFlowtestError3\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://ordercanceleldFlowtestError3\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://ordercanceleldFlowtestError3\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="216f45a4-01d8-4385-8b87-14cd76efedf3">
				<flow-ref doc:name="Flow-ref to ordercanceleldFlow"
					doc:id="cd095f28-6c41-4279-8c07-8b6850a46330"
					name="ordercanceleldFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="26e62196-437c-4eac-9068-cbbb94001ee9">
						<logger level="INFO" doc:name="Logger"
							doc:id="86b5332e-9f3a-4a61-8276-51af4f2b0ce6" message="Continue" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="70620828-28ce-4e8a-a8d3-e769225af699"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import ordercanceleldFlowtestError3::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\productDetails:pro-customerportal-config-test"
		doc:id="37a388bf-6d0b-43a7-a67a-52b2657d9120">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock getProductDetialsFlow"
				doc:id="651aa612-6b00-4fed-8e89-5e11e2e2ef4e" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="4e0964ea-a6fc-4366-bb2c-a6aa91058499"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getproductDetailsprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getproductDetailsprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getproductDetailsprocustomerportalconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="bec107a8-08f2-40a8-853e-2f9e7fb88bdf">
				<munit:payload
					value="#[readUrl('classpath://getproductDetailsprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getproductDetailsprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getproductDetailsprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to get:\productDetails:pro-customerportal-config"
				doc:id="c2921f7d-de19-4ceb-8028-eb97b87ac7a4"
				name="get:\productDetails:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="0a3cdb82-3e63-4860-b35c-efb20b6dd3a6"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getproductDetailsprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\pro-addToCart:application\json:pro-customerportal-config-test"
		doc:id="cc2f08e9-0e82-40e0-9a18-6ba4c0e2fb15">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock pro-addToCartFlow"
				doc:id="26cc4a55-6af7-4b63-8f12-14b6504f6bbc" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="5b130a7f-5c21-490e-88a9-86c5673bf387"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="vCartInfo"
							value="#[output application/json --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseResponse"
							value="#[output application/json --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchaseDetails"
							value="#[output application/json --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="externalId"
							value="#[output application/json --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vCustomerDetails"
							value="#[output application/json --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="4011a07a-0e6e-4063-9f6f-6ddb8aeff7bf">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://postproaddToCartapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to post:\pro-addToCart:application\json:pro-customerportal-config"
				doc:id="3fd28592-11a4-4623-9ab6-be9dd2cfd606"
				name="post:\pro-addToCart:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="054fb47a-3a91-40aa-8176-85688de23f1c"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import postproaddToCartapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\pro-cartDetails:pro-customerportal-config-test"
		doc:id="9f708ab1-7c78-4fda-bc29-765dbb657d51">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock pro-cartDetailsFlow"
				doc:id="cc407ee8-1cb4-46a6-a262-91069600706e" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e96e9ada-54f5-425b-83b5-aac9bb732417"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getprocartDetailsprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getprocartDetailsprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getprocartDetailsprocustomerportalconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="76d74e82-31e3-4023-b562-c7622dc472b0">
				<munit:payload
					value="#[readUrl('classpath://getprocartDetailsprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getprocartDetailsprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getprocartDetailsprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to get:\pro-cartDetails:pro-customerportal-config"
				doc:id="85c85f03-f406-4396-aa52-8becd9341a9b"
				name="get:\pro-cartDetails:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="3f759da0-1f14-4a29-b694-56acad0de432"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getprocartDetailsprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\pro-modifyCart:application\json:pro-customerportal-config-test"
		doc:id="1a8b6ae8-fb67-445d-8b78-daefba5dd988">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock modifyCartFlow"
				doc:id="b45e701c-7930-4cee-90b1-716ec6804fa5" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="51a1aaab-de60-4578-b1f3-14e255e584fa"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="productTitle"
							value="#[output application/java --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="warehouseQuantity"
							value="#[output application/json --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="updateDetails"
							value="#[output application/json --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="total_price"
							value="#[output application/java --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_4.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable
							key="warehouse_location"
							value="#[output application/java --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_5.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable
							key="cartProductQuantity"
							value="#[output application/java --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\mock_variable_7.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="8b59ae9a-8473-451c-8007-7214a35b605a">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putpromodifyCartapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\pro-modifyCart:application\json:pro-customerportal-config"
				doc:id="203e39db-dc2a-480e-b628-92e813f3c8a5"
				name="put:\pro-modifyCart:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="2034857e-06bc-4089-aa8e-a766c31a830c"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putpromodifyCartapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\pro-payment:application\json:pro-customerportal-config-test"
		doc:id="1a6628ae-7c65-44af-b4ef-ed9d3d4c69c4">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Sending Payload to proPayment Flow"
				doc:id="a84e481c-8bed-4284-afb3-aeebf1b41dc4" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e590e431-32d5-4663-bb69-a2a6d197262b"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="card"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="productId"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="cartDetails"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="location"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_4.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_5.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="paymentDetails"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_6.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="order"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_7.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="purchasedProduct"
							value="#[output application/json --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\mock_variable_8.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="d1e3d461-d2f4-419f-a2a0-84556e177e86">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://postpropaymentapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to post:\pro-payment:application\json:pro-customerportal-config"
				doc:id="cacc4488-e1c2-4eb6-9d74-716530c01b13"
				name="post:\pro-payment:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="504baa85-6a9c-4099-a3b0-ab93a55e6aed"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import postpropaymentapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\pro-feedback:application\json:pro-customerportal-config-test"
		doc:id="e0f8c7f0-e8ea-45eb-86a4-0617d0c78e49">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock feedback Flow"
				doc:id="d8119c9c-9d72-451a-8189-213957b44ee0" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="dc1cfe6c-fbcc-4abf-ba1a-b6a9f92e0022"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="feedback"
							value="#[output application/json --- readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="orderId"
							value="#[output application/json --- readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerId"
							value="#[output application/java --- readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="cc2c5832-a2e0-41ee-8441-0e5d82a14688">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://postprofeedbackapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to post:\pro-feedback:application\json:pro-customerportal-config"
				doc:id="fe2fbb1b-020d-4307-bf83-a7fb587c2cfd"
				name="post:\pro-feedback:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="83c82c5d-2e34-4392-bc61-ff08118fe8dc"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import postprofeedbackapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\fetchCustomerDetails:pro-customerportal-config-test"
		doc:id="ba3c8d68-9470-46c8-b78f-14a33a2e7eb1">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock getCustomerDetailsflow"
				doc:id="0209d951-3224-4ea6-b2f3-c0fb7084839b" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8b40359f-eee8-4042-a406-a31a041fff9e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getfetchCustomerDetailsprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getfetchCustomerDetailsprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getfetchCustomerDetailsprocustomerportalconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="4cfb18dd-4b6c-41f4-a3f8-4968a5e9a99f">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://getfetchCustomerDetailsprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://getfetchCustomerDetailsprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getfetchCustomerDetailsprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to get:\fetchCustomerDetails:pro-customerportal-config"
				doc:id="0159c72f-8d80-46e7-b92e-2ed572a6f277"
				name="get:\fetchCustomerDetails:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="e74afebb-8f67-4184-b184-260b58a05a6f"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getfetchCustomerDetailsprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\modifyCustomerDetails:application\json:pro-customerportal-config-test"
		doc:id="8eef092a-494d-4fe4-bd11-c9748b9e4d9a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock updateCustomerDetails"
				doc:id="f03af5cc-6612-4169-a918-f10a94cf6762" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="d7ac8479-25d0-4bed-babe-12ef482780b0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="customerDetails"
							value="#[output application/json --- readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="VcustomerID"
							value="#[output application/json --- readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="b5cb748f-c728-4b47-b06c-64c3d11b246c">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\modifyCustomerDetails:application\json:pro-customerportal-config"
				doc:id="d9488654-4f35-4b98-8f40-e178490d5e52"
				name="put:\modifyCustomerDetails:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="78ddd2c2-ae74-422e-98b8-1013d1bc28ce"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putmodifyCustomerDetailsapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\pro-orderDelivered:pro-customerportal-config-test"
		doc:id="5de6d4c8-2675-4346-add4-9272dd876532">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock orderdeliveredFlow"
				doc:id="4a8ad072-aee4-4244-b1be-9d3fd59d1944" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="5132938e-172e-4649-8f5f-fa95866f37a4"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="aae759ce-7933-4ce0-8b67-fddcb8a7408d">
				<munit:payload
					value="#[readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putproorderDeliveredprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\pro-orderDelivered:pro-customerportal-config"
				doc:id="f744faab-2c8d-47e4-b102-9a11b92390df"
				name="put:\pro-orderDelivered:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="bcab4989-41f8-4d75-8ada-fdd238db6878"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putproorderDeliveredprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\pro-orderCancelled:pro-customerportal-config-test"
		doc:id="0eb96fa0-7c05-454c-81c9-c82d423cb77c">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock ordercanceleldFlow"
				doc:id="a7dc891c-59e6-487c-a3fa-ae358fb1cc0e" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="9a61bb69-e957-4748-ba42-1dca6964ac4b"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="VorderId"
							value="#[output application/json --- readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\mock_variable_.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="b2ce655a-e52e-496a-898b-2582947d878c">
				<munit:payload
					value="#[readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putproorderCancelledprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\pro-orderCancelled:pro-customerportal-config"
				doc:id="932129b9-3c24-4497-869d-a1901e1f1e33"
				name="put:\pro-orderCancelled:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="a18b377f-60c6-4481-ba7c-832a3a7518cc"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putproorderCancelledprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\addProductQuantity:application\json:pro-customerportal-config-test"
		doc:id="ee65a95f-492f-42ee-84bc-69cd25cbc88e">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock updateProductQuantityFlow"
				doc:id="59c92333-2dd8-4127-a9eb-fd6d2269097f" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="949a7ce0-9c92-43a4-9399-3512555a29a3"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="response"
							value="#[output application/json --- readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="productDetails"
							value="#[output application/json --- readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="cf416e07-2010-47d8-9b63-e18a03f0cfa8">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putaddProductQuantityapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\addProductQuantity:application\json:pro-customerportal-config"
				doc:id="5b91812b-dfa1-4228-9dd0-2930d5e5272f"
				name="put:\addProductQuantity:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="15d66feb-9032-4f90-b15b-a4aae604e8a5"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putaddProductQuantityapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\pro-track_complaint:pro-customerportal-config-test"
		doc:id="0f5b7e2c-1397-4ea7-b6ff-3fd60b8ac208">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock pro-track_complaintFlow"
				doc:id="a33520f6-647f-4d29-8ec2-ffb375b61157" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="7a2fdc2f-86a7-4f3f-b04a-f2cd314f4bf9"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://getprotrackcomplaintprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getprotrackcomplaintprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getprotrackcomplaintprocustomerportalconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="3af20fd7-02cf-4e96-8f20-b16197d133ec">
				<munit:payload
					value="#[readUrl('classpath://getprotrackcomplaintprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getprotrackcomplaintprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getprotrackcomplaintprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to get:\pro-track_complaint:pro-customerportal-config"
				doc:id="d527c16f-7990-4f8e-b341-fc38f94cbd48"
				name="get:\pro-track_complaint:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="7c175e21-2199-42f5-a897-edabf6fa267f"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getprotrackcomplaintprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\pro-addComplaint:application\json:pro-customerportal-config-test"
		doc:id="3094dce6-fa81-4c3a-adb8-bec39f4768c5">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock pro_addComplaintFlow"
				doc:id="c3dcc0b6-3671-4eec-8c45-c779d478b23e" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="dd846a9d-ada0-45a7-8368-d70f41d9f050"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[output application/java --- readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="orderDetails"
							value="#[output application/json --- readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="initialPayload"
							value="#[output application/json --- readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="e0caa8eb-c0bd-4278-9e3f-f6fd84bd1ede">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://postproaddComplaintapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to post:\pro-addComplaint:application\json:pro-customerportal-config"
				doc:id="237c48b4-c661-4b62-b8d2-8b0c655bcce4"
				name="post:\pro-addComplaint:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="8c93c07a-782e-4eb0-a03f-c8343123b26f"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import postproaddComplaintapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\pro-close_complaint:application\json:pro-customerportal-config-test"
		doc:id="2d1cb973-93b8-4549-928c-6ce8fc697980">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock pro_closed_complaintFlow"
				doc:id="6baec65c-1402-4225-a9bb-c4b383665ffb" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="30a30e9c-075c-4aea-a401-547082418860"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\mock_payload.dwl')]"
						mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="complaintId"
							value="#[output application/java --- readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="action"
							value="#[output application/java --- readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\mock_variable_2.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="complaintDetails"
							value="#[output application/json --- readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="f336c41e-1ed9-4bcd-921c-6b5767096cb5">
				<munit:payload
					value="#[output application/json  --- readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json " />
				<munit:attributes
					value="#[readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putproclosecomplaintapplicationjsonprocustomerportalconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\pro-close_complaint:application\json:pro-customerportal-config"
				doc:id="2339a6b0-d16b-4a97-8f19-3f8b16f7c912"
				name="put:\pro-close_complaint:application\json:pro-customerportal-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="95ea2383-05a4-46ce-b9e1-80a572569886"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putproclosecomplaintapplicationjsonprocustomerportalconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="router-test-bad-req"
		doc:id="12d28dd7-c9a9-4bc7-8c2f-2334bafd945f">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock APIkit Router"
				doc:id="76ce255c-5a8b-4fd4-bda5-ac0e89d97ca0"
				processor="apikit:router">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8eff2a81-3ea8-4a02-90ce-8f12693ca28d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://routertestbadrequest\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[readUrl('classpath://routertestbadrequest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="be8e0981-6d26-446c-b562-37088d926447">
				<munit:payload
					value="#[readUrl('classpath://routertestbadrequest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://routertestbadrequest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="8b8c7e5d-80cd-4f34-87ac-02c9d4e49a36">
				<flow-ref doc:name="pro-customerportal-main"
					doc:id="96d16269-0e5e-4698-a414-2a2656d53fd8"
					name="pro-customerportal-main" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="c6afd8f5-1b9c-4513-88c5-aa319dbb107d">
						<logger level="INFO" doc:name="Logger"
							doc:id="eafacab4-c302-431c-99d8-378bde370e02"
							message="continue..." />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="cd569dbb-432d-49e0-afff-8a212bd088b4"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import routertestbadrequest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="router-test-not-found"
		doc:id="cc602e91-5651-49db-98bc-e9006a93dd22">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock APIkit Router"
				doc:id="e70784b5-9539-4177-af67-2223b51b07cd"
				processor="apikit:router">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8eff2a81-3ea8-4a02-90ce-8f12693ca28d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://routertestnotfound\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[readUrl('classpath://routertestnotfound\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="31d03a33-1c9d-466c-8205-7d8a2531c5bf">
				<munit:payload
					value="#[readUrl('classpath://routertestnotfound\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://routertestnotfound\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="0d1a5a97-42ba-4d1c-8fee-6d953cb4d16c">
				<flow-ref doc:name="pro-customerportal-main"
					doc:id="404469f5-dca0-4aff-a176-fc629f2bc7e1"
					name="pro-customerportal-main" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="ed7af234-56ff-4310-89c1-55ae4f57cfe9">
						<logger level="INFO" doc:name="Logger"
							doc:id="b1a304b2-f36f-4aa8-ad51-c484056176ef"
							message="continue..." />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="1ed93853-1c12-4756-bebe-d62e1ef41037"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import routertestnotfound::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="router-test-unsupported-media-type"
		doc:id="e5400a1b-de60-4dd4-9d40-1955b5e621ba">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock APIkit Router"
				doc:id="bc58347a-c675-410d-8614-8c7ddb67691b"
				processor="apikit:router">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8eff2a81-3ea8-4a02-90ce-8f12693ca28d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error
						typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://routertestunsupportedmediatype\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[readUrl('classpath://routertestunsupportedmediatype\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="c031fed9-f5bf-42f6-865e-61afff0aa187">
				<munit:payload
					value="#[readUrl('classpath://routertestunsupportedmediatype\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://routertestunsupportedmediatype\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="4fb87411-68d3-493e-ac97-2b28e2d0e207">
				<flow-ref doc:name="pro-customerportal-main"
					doc:id="a46e8049-d536-4016-a34b-afb6dba17870"
					name="pro-customerportal-main" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="af1afada-c66c-40d0-80c2-169cc715cc25">
						<logger level="INFO" doc:name="Logger"
							doc:id="e3390a61-a716-4d80-88d9-63f89ec2faa2"
							message="continue..." />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="f816d759-d458-43c0-9308-2ac878370d56"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import routertestunsupportedmediatype::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="router-test-method-not-allowed"
		doc:id="72db211f-6f97-4ac3-a62d-0a192f73977f">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock APIkit Router"
				doc:id="9ffb2661-a808-436a-a0fb-13afd3560579"
				processor="apikit:router">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8eff2a81-3ea8-4a02-90ce-8f12693ca28d"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error
						typeId="APIKIT:METHOD_NOT_ALLOWED" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://routertestmethodnotallowed\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus"
							value="#[readUrl('classpath://routertestmethodnotallowed\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="1134874a-93ec-4a2f-8771-d25ec8b91e61">
				<munit:payload
					value="#[readUrl('classpath://routertestmethodnotallowed\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://routertestmethodnotallowed\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="417098b8-18b0-44ce-b53d-1025868f00c7">
				<flow-ref doc:name="pro-customerportal-main"
					doc:id="d44d8128-a71e-41de-b692-b3c22569e0f0"
					name="pro-customerportal-main" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="dad4f805-05c1-4b0b-b3a4-41d14c012168">
						<logger level="INFO" doc:name="Logger"
							doc:id="d5c2aabf-4a45-40dd-bbec-cd30e81d2a64"
							message="continue..." />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="f877d029-233d-4e1b-843d-878c036fa392"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import routertestmethodnotallowed::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="orderdelivered-test-suite"
		doc:id="d7e13e7c-78a3-443f-ba0d-33f3e309f6f2" description="Test">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="5253223a-4651-48ee-9b07-d7bfd607fde7"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e416a876-195a-4676-82d5-069c4ee501ea"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://orderDeliveredFlowtest\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="orderId"
							value="#[ readUrl('classpath://orderDeliveredFlowtest\set-event_variable.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when1"
				doc:id="3e9fe1f6-7140-4045-9674-2228e071a14d"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6dd5dfb3-431d-43f5-bedc-8687cb8f3afd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://orderDeliveredFlowtest\mock_payload2.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="orderId"
							value="#[ readUrl('classpath://orderDeliveredFlowtest\set-event_variable.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event"
				doc:id="d33bb9e1-7e82-4d64-8bc2-433c153c7e1d">
				<munit:variables>
					<munit:variable key="orderId"
						value="#[ readUrl('classpath://orderDeliveredFlowtest\set-event_variable.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to orderdeliveredFlow"
				doc:id="3dbec142-042c-4f5e-b409-4c746cf8e35b"
				name="orderdeliveredFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression"
				doc:id="ca9f9d6f-63fc-47fd-a6da-f36348e504fc">
				<munit-tools:that><![CDATA[#[%dw 2.0
import orderDeliveredFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="orderdelivered-test-suite1"
		doc:id="6423ab8f-b314-4688-a8e7-5aa5e1f1000d" description="Test">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when"
				doc:id="4d21f6c2-275c-4859-a6d0-23872c7cc31a"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="e416a876-195a-4676-82d5-069c4ee501ea"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://orderDeliveredFlowerrorTest1\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="orderId"
							value="#[ readUrl('classpath://orderDeliveredFlowerrorTest1\set-event_variable.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when1"
				doc:id="90dd5e39-7323-4b81-83e5-842e948164ad"
				processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6dd5dfb3-431d-43f5-bedc-8687cb8f3afd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json  --- readUrl('classpath://orderDeliveredFlowerrorTest1\mock_payload2.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="orderId"
							value="#[ readUrl('classpath://orderDeliveredFlowerrorTest1\set-event_variable.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event"
				doc:id="18eaf878-656c-4a79-bb9f-d0ea65f391e3">
				<munit:variables>
					<munit:variable key="orderId"
						value="#[ readUrl('classpath://orderDeliveredFlowerrorTest1\set-event_variable.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="f2f59d09-e3d7-4323-a3b6-3fc1c0c3bac5">
				<flow-ref doc:name="Flow-ref to orderdeliveredFlow"
					doc:id="35188fff-87c8-458f-b055-cfd08c5b0ec7"
					name="orderdeliveredFlow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="6458a793-70d0-4515-8fb7-251e369dc527">
						<logger level="INFO" doc:name="Logger"
							doc:id="e75de085-d6b0-47f3-9c49-5125eb95d319" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression"
				doc:id="053cb706-c488-4ee4-9c9d-e1be66f28728">
				<munit-tools:that><![CDATA[#[%dw 2.0
import orderDeliveredFlowerrorTest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<flow name="mock-email:send1" doc:id="d0b7bb2b-e963-4559-8d6c-0a733b24c928" >
		<try doc:name="Try" doc:id="6572e953-ad14-415c-987c-adecf90b62f2" >
			<munit-tools:retrieve doc:name="Retrieve" doc:id="6005df5a-41cc-48d7-8509-4cd10a030f3b" key="Mock Send Email"/>
			<error-handler >
				<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="e8fab4ed-fde9-49ee-a0b1-57729ce824b5" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload" doc:id="656437db-483d-422f-9355-b7599bce4eab" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store" doc:id="7761a312-f332-412c-adc8-fcee3e776ca6" key="Mock Send Email">
			<munit-tools:value ><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice" doc:id="0ac8f985-942c-4f22-8e18-4460446e9bbe" >
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event" doc:id="1c2947e9-dbd6-42d5-8a7e-7ae942b4a39d" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://notifyUserFlowtest\mock_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="items" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="email" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="externalId" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_2.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_3.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="emailId" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_4.dwl')]" encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event" doc:id="3d567cbf-f4de-49c8-8d79-0fbc116f90a6" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://notifyUserFlowtest\mock_payload1.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="items" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_5.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="email" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_6.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="externalId" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_7.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_8.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="emailId" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_9.dwl')]" encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise >
				<munit-tools:fail doc:name="Fail" doc:id="458ee538-4cd3-4426-b941-e55635302e7a" message="There are no more events to mock"/>
			</otherwise>
		</choice>
	</flow>
	<flow name="mock-http:request4" doc:id="d002287f-0deb-44ac-80ff-d26c45ab036f" >
		<try doc:name="Try" doc:id="bc08057e-1f70-42a1-86c8-f632cff4465d" >
			<munit-tools:retrieve doc:name="Retrieve" doc:id="ffc2961f-7b9c-42c3-b63c-1425556ced50" key="Mock Fetch Customer  Details"/>
			<error-handler >
				<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="b70942ca-05c2-4535-812a-798d2b01ce6d" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload" doc:id="d1603fe4-9a81-42b9-8c84-d61b0a18e4d8" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store" doc:id="55114fe3-60ce-479c-8e7c-f387d9c8207b" key="Mock Fetch Customer  Details">
			<munit-tools:value ><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice" doc:id="eec8d1cb-98e6-421b-b357-7c90330791a9" >
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event" doc:id="ed45bd61-a10f-4c91-beef-334d3d6b7635" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://notifyUserFlowtest\mock_payload2.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="items" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_10.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="externalId" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_11.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_12.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="emailId" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_13.dwl')]" encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event" doc:id="5280bb67-8a14-4dff-b9a4-2ffc940ffac1" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://notifyUserFlowtest\mock_payload3.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="items" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_14.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="externalId" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_15.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_16.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="emailId" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_17.dwl')]" encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 3]">
				<munit:set-event doc:name="Set Event" doc:id="9b2f45ec-0a62-4771-84ec-71a17d90356d" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://notifyUserFlowtest\mock_payload4.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="items" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_18.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="externalId" value="#[output application/java --- readUrl('classpath://notifyUserFlowtest\mock_variable_19.dwl')]" encoding="UTF-8" mediaType="application/java" />
						<munit:variable key="oldItems" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_20.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="emailId" value="#[output application/json --- readUrl('classpath://notifyUserFlowtest\mock_variable_21.dwl')]" encoding="UTF-8" mediaType="application/json" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise >
				<munit-tools:fail doc:name="Fail" doc:id="98b2c775-87c5-4e3e-89a4-5bc2895c7aa5" message="There are no more events to mock"/>
			</otherwise>
		</choice>
	</flow>
	<munit:test name="notifyUserFlow-test" doc:id="bfb2a4c1-f6db-4394-a093-5d7bc18a020d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Send Email" doc:id="d9898864-6f68-4303-9f95-725705594591" processor="email:send">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="3fb6c936-3bed-44ec-86c6-db71ca3bbf5f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-email:send1" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Fetch Customer  Details" doc:id="41ca3ad8-90f0-4555-bdbc-fc16c537e2b1" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a2712949-027c-4376-a482-e29b74587d93" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-http:request4" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Get all cart Details" doc:id="35533499-d590-4f88-9610-d8e161d62f91" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="69b7090c-dfac-4175-adcd-3f39d08a98a9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://notifyUserFlowtest\mock_payload5.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://notifyUserFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a04bc5b4-fc00-4d34-aa4e-a1406a7d88dc" >
				<munit:payload value="#[readUrl('classpath://notifyUserFlowtest\set-event_payload.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to notifyUserFlow" doc:id="bdc98708-4cb2-4f9e-b0ee-943a49418eb4" name="notifyUserFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call" doc:id="60ea6ff8-b39f-4a0d-b9c8-3649660d1d84" processor="logger" atLeast="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="62b3de77-5416-4067-86fa-1d0b34e504ee" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
</mule>
